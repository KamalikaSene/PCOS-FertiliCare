/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bcryptjs";
exports.ids = ["vendor-chunks/bcryptjs"];
exports.modules = {

/***/ "(action-browser)/./node_modules/bcryptjs/dist/bcrypt.js":
/*!**********************************************!*\
  !*** ./node_modules/bcryptjs/dist/bcrypt.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\r\n Copyright (c) 2012 Nevins Bartolomeo <nevins.bartolomeo@gmail.com>\r\n Copyright (c) 2012 Shane Girish <shaneGirish@gmail.com>\r\n Copyright (c) 2014 Daniel Wirtz <dcode@dcode.io>\r\n\r\n Redistribution and use in source and binary forms, with or without\r\n modification, are permitted provided that the following conditions\r\n are met:\r\n 1. Redistributions of source code must retain the above copyright\r\n notice, this list of conditions and the following disclaimer.\r\n 2. Redistributions in binary form must reproduce the above copyright\r\n notice, this list of conditions and the following disclaimer in the\r\n documentation and/or other materials provided with the distribution.\r\n 3. The name of the author may not be used to endorse or promote products\r\n derived from this software without specific prior written permission.\r\n\r\n THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\r\n IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\r\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */ /**\r\n * @license bcrypt.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/bcrypt.js for details\r\n */ (function(global, factory) {\n    /* AMD */ if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    else {}\n})(this, function() {\n    \"use strict\";\n    /**\r\n     * bcrypt namespace.\r\n     * @type {Object.<string,*>}\r\n     */ var bcrypt = {};\n    /**\r\n     * The random implementation to use as a fallback.\r\n     * @type {?function(number):!Array.<number>}\r\n     * @inner\r\n     */ var randomFallback = null;\n    /**\r\n     * Generates cryptographically secure random bytes.\r\n     * @function\r\n     * @param {number} len Bytes length\r\n     * @returns {!Array.<number>} Random bytes\r\n     * @throws {Error} If no random implementation is available\r\n     * @inner\r\n     */ function random(len) {\n        /* node */ if ( true && module && module[\"exports\"]) try {\n            return (__webpack_require__(/*! crypto */ \"crypto\").randomBytes)(len);\n        } catch (e) {}\n        /* WCA */ try {\n            var a;\n            (self[\"crypto\"] || self[\"msCrypto\"])[\"getRandomValues\"](a = new Uint32Array(len));\n            return Array.prototype.slice.call(a);\n        } catch (e) {}\n        /* fallback */ if (!randomFallback) throw Error(\"Neither WebCryptoAPI nor a crypto module is available. Use bcrypt.setRandomFallback to set an alternative\");\n        return randomFallback(len);\n    }\n    // Test if any secure randomness source is available\n    var randomAvailable = false;\n    try {\n        random(1);\n        randomAvailable = true;\n    } catch (e) {}\n    // Default fallback, if any\n    randomFallback = null;\n    /**\r\n     * Sets the pseudo random number generator to use as a fallback if neither node's `crypto` module nor the Web Crypto\r\n     *  API is available. Please note: It is highly important that the PRNG used is cryptographically secure and that it\r\n     *  is seeded properly!\r\n     * @param {?function(number):!Array.<number>} random Function taking the number of bytes to generate as its\r\n     *  sole argument, returning the corresponding array of cryptographically secure random byte values.\r\n     * @see http://nodejs.org/api/crypto.html\r\n     * @see http://www.w3.org/TR/WebCryptoAPI/\r\n     */ bcrypt.setRandomFallback = function(random) {\n        randomFallback = random;\n    };\n    /**\r\n     * Synchronously generates a salt.\r\n     * @param {number=} rounds Number of rounds to use, defaults to 10 if omitted\r\n     * @param {number=} seed_length Not supported.\r\n     * @returns {string} Resulting salt\r\n     * @throws {Error} If a random fallback is required but not set\r\n     * @expose\r\n     */ bcrypt.genSaltSync = function(rounds, seed_length) {\n        rounds = rounds || GENSALT_DEFAULT_LOG2_ROUNDS;\n        if (typeof rounds !== \"number\") throw Error(\"Illegal arguments: \" + typeof rounds + \", \" + typeof seed_length);\n        if (rounds < 4) rounds = 4;\n        else if (rounds > 31) rounds = 31;\n        var salt = [];\n        salt.push(\"$2a$\");\n        if (rounds < 10) salt.push(\"0\");\n        salt.push(rounds.toString());\n        salt.push(\"$\");\n        salt.push(base64_encode(random(BCRYPT_SALT_LEN), BCRYPT_SALT_LEN)); // May throw\n        return salt.join(\"\");\n    };\n    /**\r\n     * Asynchronously generates a salt.\r\n     * @param {(number|function(Error, string=))=} rounds Number of rounds to use, defaults to 10 if omitted\r\n     * @param {(number|function(Error, string=))=} seed_length Not supported.\r\n     * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting salt\r\n     * @returns {!Promise} If `callback` has been omitted\r\n     * @throws {Error} If `callback` is present but not a function\r\n     * @expose\r\n     */ bcrypt.genSalt = function(rounds, seed_length, callback) {\n        if (typeof seed_length === \"function\") callback = seed_length, seed_length = undefined; // Not supported.\n        if (typeof rounds === \"function\") callback = rounds, rounds = undefined;\n        if (typeof rounds === \"undefined\") rounds = GENSALT_DEFAULT_LOG2_ROUNDS;\n        else if (typeof rounds !== \"number\") throw Error(\"illegal arguments: \" + typeof rounds);\n        function _async(callback) {\n            nextTick(function() {\n                try {\n                    callback(null, bcrypt.genSaltSync(rounds));\n                } catch (err) {\n                    callback(err);\n                }\n            });\n        }\n        if (callback) {\n            if (typeof callback !== \"function\") throw Error(\"Illegal callback: \" + typeof callback);\n            _async(callback);\n        } else return new Promise(function(resolve, reject) {\n            _async(function(err, res) {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                resolve(res);\n            });\n        });\n    };\n    /**\r\n     * Synchronously generates a hash for the given string.\r\n     * @param {string} s String to hash\r\n     * @param {(number|string)=} salt Salt length to generate or salt to use, default to 10\r\n     * @returns {string} Resulting hash\r\n     * @expose\r\n     */ bcrypt.hashSync = function(s, salt) {\n        if (typeof salt === \"undefined\") salt = GENSALT_DEFAULT_LOG2_ROUNDS;\n        if (typeof salt === \"number\") salt = bcrypt.genSaltSync(salt);\n        if (typeof s !== \"string\" || typeof salt !== \"string\") throw Error(\"Illegal arguments: \" + typeof s + \", \" + typeof salt);\n        return _hash(s, salt);\n    };\n    /**\r\n     * Asynchronously generates a hash for the given string.\r\n     * @param {string} s String to hash\r\n     * @param {number|string} salt Salt length to generate or salt to use\r\n     * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting hash\r\n     * @param {function(number)=} progressCallback Callback successively called with the percentage of rounds completed\r\n     *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\r\n     * @returns {!Promise} If `callback` has been omitted\r\n     * @throws {Error} If `callback` is present but not a function\r\n     * @expose\r\n     */ bcrypt.hash = function(s, salt, callback, progressCallback) {\n        function _async(callback) {\n            if (typeof s === \"string\" && typeof salt === \"number\") bcrypt.genSalt(salt, function(err, salt) {\n                _hash(s, salt, callback, progressCallback);\n            });\n            else if (typeof s === \"string\" && typeof salt === \"string\") _hash(s, salt, callback, progressCallback);\n            else nextTick(callback.bind(this, Error(\"Illegal arguments: \" + typeof s + \", \" + typeof salt)));\n        }\n        if (callback) {\n            if (typeof callback !== \"function\") throw Error(\"Illegal callback: \" + typeof callback);\n            _async(callback);\n        } else return new Promise(function(resolve, reject) {\n            _async(function(err, res) {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                resolve(res);\n            });\n        });\n    };\n    /**\r\n     * Compares two strings of the same length in constant time.\r\n     * @param {string} known Must be of the correct length\r\n     * @param {string} unknown Must be the same length as `known`\r\n     * @returns {boolean}\r\n     * @inner\r\n     */ function safeStringCompare(known, unknown) {\n        var right = 0, wrong = 0;\n        for(var i = 0, k = known.length; i < k; ++i){\n            if (known.charCodeAt(i) === unknown.charCodeAt(i)) ++right;\n            else ++wrong;\n        }\n        // Prevent removal of unused variables (never true, actually)\n        if (right < 0) return false;\n        return wrong === 0;\n    }\n    /**\r\n     * Synchronously tests a string against a hash.\r\n     * @param {string} s String to compare\r\n     * @param {string} hash Hash to test against\r\n     * @returns {boolean} true if matching, otherwise false\r\n     * @throws {Error} If an argument is illegal\r\n     * @expose\r\n     */ bcrypt.compareSync = function(s, hash) {\n        if (typeof s !== \"string\" || typeof hash !== \"string\") throw Error(\"Illegal arguments: \" + typeof s + \", \" + typeof hash);\n        if (hash.length !== 60) return false;\n        return safeStringCompare(bcrypt.hashSync(s, hash.substr(0, hash.length - 31)), hash);\n    };\n    /**\r\n     * Asynchronously compares the given data against the given hash.\r\n     * @param {string} s Data to compare\r\n     * @param {string} hash Data to be compared to\r\n     * @param {function(Error, boolean)=} callback Callback receiving the error, if any, otherwise the result\r\n     * @param {function(number)=} progressCallback Callback successively called with the percentage of rounds completed\r\n     *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\r\n     * @returns {!Promise} If `callback` has been omitted\r\n     * @throws {Error} If `callback` is present but not a function\r\n     * @expose\r\n     */ bcrypt.compare = function(s, hash, callback, progressCallback) {\n        function _async(callback) {\n            if (typeof s !== \"string\" || typeof hash !== \"string\") {\n                nextTick(callback.bind(this, Error(\"Illegal arguments: \" + typeof s + \", \" + typeof hash)));\n                return;\n            }\n            if (hash.length !== 60) {\n                nextTick(callback.bind(this, null, false));\n                return;\n            }\n            bcrypt.hash(s, hash.substr(0, 29), function(err, comp) {\n                if (err) callback(err);\n                else callback(null, safeStringCompare(comp, hash));\n            }, progressCallback);\n        }\n        if (callback) {\n            if (typeof callback !== \"function\") throw Error(\"Illegal callback: \" + typeof callback);\n            _async(callback);\n        } else return new Promise(function(resolve, reject) {\n            _async(function(err, res) {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                resolve(res);\n            });\n        });\n    };\n    /**\r\n     * Gets the number of rounds used to encrypt the specified hash.\r\n     * @param {string} hash Hash to extract the used number of rounds from\r\n     * @returns {number} Number of rounds used\r\n     * @throws {Error} If `hash` is not a string\r\n     * @expose\r\n     */ bcrypt.getRounds = function(hash) {\n        if (typeof hash !== \"string\") throw Error(\"Illegal arguments: \" + typeof hash);\n        return parseInt(hash.split(\"$\")[2], 10);\n    };\n    /**\r\n     * Gets the salt portion from a hash. Does not validate the hash.\r\n     * @param {string} hash Hash to extract the salt from\r\n     * @returns {string} Extracted salt part\r\n     * @throws {Error} If `hash` is not a string or otherwise invalid\r\n     * @expose\r\n     */ bcrypt.getSalt = function(hash) {\n        if (typeof hash !== \"string\") throw Error(\"Illegal arguments: \" + typeof hash);\n        if (hash.length !== 60) throw Error(\"Illegal hash length: \" + hash.length + \" != 60\");\n        return hash.substring(0, 29);\n    };\n    /**\r\n     * Continues with the callback on the next tick.\r\n     * @function\r\n     * @param {function(...[*])} callback Callback to execute\r\n     * @inner\r\n     */ var nextTick = typeof process !== \"undefined\" && process && typeof process.nextTick === \"function\" ? typeof setImmediate === \"function\" ? setImmediate : process.nextTick : setTimeout;\n    /**\r\n     * Converts a JavaScript string to UTF8 bytes.\r\n     * @param {string} str String\r\n     * @returns {!Array.<number>} UTF8 bytes\r\n     * @inner\r\n     */ function stringToBytes(str) {\n        var out = [], i = 0;\n        utfx.encodeUTF16toUTF8(function() {\n            if (i >= str.length) return null;\n            return str.charCodeAt(i++);\n        }, function(b) {\n            out.push(b);\n        });\n        return out;\n    }\n    // A base64 implementation for the bcrypt algorithm. This is partly non-standard.\n    /**\r\n     * bcrypt's own non-standard base64 dictionary.\r\n     * @type {!Array.<string>}\r\n     * @const\r\n     * @inner\r\n     **/ var BASE64_CODE = \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".split(\"\");\n    /**\r\n     * @type {!Array.<number>}\r\n     * @const\r\n     * @inner\r\n     **/ var BASE64_INDEX = [\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        0,\n        1,\n        54,\n        55,\n        56,\n        57,\n        58,\n        59,\n        60,\n        61,\n        62,\n        63,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        20,\n        21,\n        22,\n        23,\n        24,\n        25,\n        26,\n        27,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        28,\n        29,\n        30,\n        31,\n        32,\n        33,\n        34,\n        35,\n        36,\n        37,\n        38,\n        39,\n        40,\n        41,\n        42,\n        43,\n        44,\n        45,\n        46,\n        47,\n        48,\n        49,\n        50,\n        51,\n        52,\n        53,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1\n    ];\n    /**\r\n     * @type {!function(...number):string}\r\n     * @inner\r\n     */ var stringFromCharCode = String.fromCharCode;\n    /**\r\n     * Encodes a byte array to base64 with up to len bytes of input.\r\n     * @param {!Array.<number>} b Byte array\r\n     * @param {number} len Maximum input length\r\n     * @returns {string}\r\n     * @inner\r\n     */ function base64_encode(b, len) {\n        var off = 0, rs = [], c1, c2;\n        if (len <= 0 || len > b.length) throw Error(\"Illegal len: \" + len);\n        while(off < len){\n            c1 = b[off++] & 0xff;\n            rs.push(BASE64_CODE[c1 >> 2 & 0x3f]);\n            c1 = (c1 & 0x03) << 4;\n            if (off >= len) {\n                rs.push(BASE64_CODE[c1 & 0x3f]);\n                break;\n            }\n            c2 = b[off++] & 0xff;\n            c1 |= c2 >> 4 & 0x0f;\n            rs.push(BASE64_CODE[c1 & 0x3f]);\n            c1 = (c2 & 0x0f) << 2;\n            if (off >= len) {\n                rs.push(BASE64_CODE[c1 & 0x3f]);\n                break;\n            }\n            c2 = b[off++] & 0xff;\n            c1 |= c2 >> 6 & 0x03;\n            rs.push(BASE64_CODE[c1 & 0x3f]);\n            rs.push(BASE64_CODE[c2 & 0x3f]);\n        }\n        return rs.join(\"\");\n    }\n    /**\r\n     * Decodes a base64 encoded string to up to len bytes of output.\r\n     * @param {string} s String to decode\r\n     * @param {number} len Maximum output length\r\n     * @returns {!Array.<number>}\r\n     * @inner\r\n     */ function base64_decode(s, len) {\n        var off = 0, slen = s.length, olen = 0, rs = [], c1, c2, c3, c4, o, code;\n        if (len <= 0) throw Error(\"Illegal len: \" + len);\n        while(off < slen - 1 && olen < len){\n            code = s.charCodeAt(off++);\n            c1 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            code = s.charCodeAt(off++);\n            c2 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            if (c1 == -1 || c2 == -1) break;\n            o = c1 << 2 >>> 0;\n            o |= (c2 & 0x30) >> 4;\n            rs.push(stringFromCharCode(o));\n            if (++olen >= len || off >= slen) break;\n            code = s.charCodeAt(off++);\n            c3 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            if (c3 == -1) break;\n            o = (c2 & 0x0f) << 4 >>> 0;\n            o |= (c3 & 0x3c) >> 2;\n            rs.push(stringFromCharCode(o));\n            if (++olen >= len || off >= slen) break;\n            code = s.charCodeAt(off++);\n            c4 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            o = (c3 & 0x03) << 6 >>> 0;\n            o |= c4;\n            rs.push(stringFromCharCode(o));\n            ++olen;\n        }\n        var res = [];\n        for(off = 0; off < olen; off++)res.push(rs[off].charCodeAt(0));\n        return res;\n    }\n    /**\r\n     * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>\r\n     * Released under the Apache License, Version 2.0\r\n     * see: https://github.com/dcodeIO/utfx for details\r\n     */ var utfx = function() {\n        \"use strict\";\n        /**\r\n         * utfx namespace.\r\n         * @inner\r\n         * @type {!Object.<string,*>}\r\n         */ var utfx = {};\n        /**\r\n         * Maximum valid code point.\r\n         * @type {number}\r\n         * @const\r\n         */ utfx.MAX_CODEPOINT = 0x10FFFF;\n        /**\r\n         * Encodes UTF8 code points to UTF8 bytes.\r\n         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\r\n         *  respectively `null` if there are no more code points left or a single numeric code point.\r\n         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte\r\n         */ utfx.encodeUTF8 = function(src, dst) {\n            var cp = null;\n            if (typeof src === \"number\") cp = src, src = function() {\n                return null;\n            };\n            while(cp !== null || (cp = src()) !== null){\n                if (cp < 0x80) dst(cp & 0x7F);\n                else if (cp < 0x800) dst(cp >> 6 & 0x1F | 0xC0), dst(cp & 0x3F | 0x80);\n                else if (cp < 0x10000) dst(cp >> 12 & 0x0F | 0xE0), dst(cp >> 6 & 0x3F | 0x80), dst(cp & 0x3F | 0x80);\n                else dst(cp >> 18 & 0x07 | 0xF0), dst(cp >> 12 & 0x3F | 0x80), dst(cp >> 6 & 0x3F | 0x80), dst(cp & 0x3F | 0x80);\n                cp = null;\n            }\n        };\n        /**\r\n         * Decodes UTF8 bytes to UTF8 code points.\r\n         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\r\n         *  are no more bytes left.\r\n         * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.\r\n         * @throws {RangeError} If a starting byte is invalid in UTF8\r\n         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the\r\n         *  remaining bytes.\r\n         */ utfx.decodeUTF8 = function(src, dst) {\n            var a, b, c, d, fail = function(b) {\n                b = b.slice(0, b.indexOf(null));\n                var err = Error(b.toString());\n                err.name = \"TruncatedError\";\n                err[\"bytes\"] = b;\n                throw err;\n            };\n            while((a = src()) !== null){\n                if ((a & 0x80) === 0) dst(a);\n                else if ((a & 0xE0) === 0xC0) (b = src()) === null && fail([\n                    a,\n                    b\n                ]), dst((a & 0x1F) << 6 | b & 0x3F);\n                else if ((a & 0xF0) === 0xE0) ((b = src()) === null || (c = src()) === null) && fail([\n                    a,\n                    b,\n                    c\n                ]), dst((a & 0x0F) << 12 | (b & 0x3F) << 6 | c & 0x3F);\n                else if ((a & 0xF8) === 0xF0) ((b = src()) === null || (c = src()) === null || (d = src()) === null) && fail([\n                    a,\n                    b,\n                    c,\n                    d\n                ]), dst((a & 0x07) << 18 | (b & 0x3F) << 12 | (c & 0x3F) << 6 | d & 0x3F);\n                else throw RangeError(\"Illegal starting byte: \" + a);\n            }\n        };\n        /**\r\n         * Converts UTF16 characters to UTF8 code points.\r\n         * @param {!function():number|null} src Characters source as a function returning the next char code respectively\r\n         *  `null` if there are no more characters left.\r\n         * @param {!function(number)} dst Code points destination as a function successively called with each converted code\r\n         *  point.\r\n         */ utfx.UTF16toUTF8 = function(src, dst) {\n            var c1, c2 = null;\n            while(true){\n                if ((c1 = c2 !== null ? c2 : src()) === null) break;\n                if (c1 >= 0xD800 && c1 <= 0xDFFF) {\n                    if ((c2 = src()) !== null) {\n                        if (c2 >= 0xDC00 && c2 <= 0xDFFF) {\n                            dst((c1 - 0xD800) * 0x400 + c2 - 0xDC00 + 0x10000);\n                            c2 = null;\n                            continue;\n                        }\n                    }\n                }\n                dst(c1);\n            }\n            if (c2 !== null) dst(c2);\n        };\n        /**\r\n         * Converts UTF8 code points to UTF16 characters.\r\n         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\r\n         *  respectively `null` if there are no more code points left or a single numeric code point.\r\n         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\r\n         * @throws {RangeError} If a code point is out of range\r\n         */ utfx.UTF8toUTF16 = function(src, dst) {\n            var cp = null;\n            if (typeof src === \"number\") cp = src, src = function() {\n                return null;\n            };\n            while(cp !== null || (cp = src()) !== null){\n                if (cp <= 0xFFFF) dst(cp);\n                else cp -= 0x10000, dst((cp >> 10) + 0xD800), dst(cp % 0x400 + 0xDC00);\n                cp = null;\n            }\n        };\n        /**\r\n         * Converts and encodes UTF16 characters to UTF8 bytes.\r\n         * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`\r\n         *  if there are no more characters left.\r\n         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.\r\n         */ utfx.encodeUTF16toUTF8 = function(src, dst) {\n            utfx.UTF16toUTF8(src, function(cp) {\n                utfx.encodeUTF8(cp, dst);\n            });\n        };\n        /**\r\n         * Decodes and converts UTF8 bytes to UTF16 characters.\r\n         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\r\n         *  are no more bytes left.\r\n         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\r\n         * @throws {RangeError} If a starting byte is invalid in UTF8\r\n         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.\r\n         */ utfx.decodeUTF8toUTF16 = function(src, dst) {\n            utfx.decodeUTF8(src, function(cp) {\n                utfx.UTF8toUTF16(cp, dst);\n            });\n        };\n        /**\r\n         * Calculates the byte length of an UTF8 code point.\r\n         * @param {number} cp UTF8 code point\r\n         * @returns {number} Byte length\r\n         */ utfx.calculateCodePoint = function(cp) {\n            return cp < 0x80 ? 1 : cp < 0x800 ? 2 : cp < 0x10000 ? 3 : 4;\n        };\n        /**\r\n         * Calculates the number of UTF8 bytes required to store UTF8 code points.\r\n         * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively\r\n         *  `null` if there are no more code points left.\r\n         * @returns {number} The number of UTF8 bytes required\r\n         */ utfx.calculateUTF8 = function(src) {\n            var cp, l = 0;\n            while((cp = src()) !== null)l += utfx.calculateCodePoint(cp);\n            return l;\n        };\n        /**\r\n         * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.\r\n         * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively\r\n         *  `null` if there are no more characters left.\r\n         * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.\r\n         */ utfx.calculateUTF16asUTF8 = function(src) {\n            var n = 0, l = 0;\n            utfx.UTF16toUTF8(src, function(cp) {\n                ++n;\n                l += utfx.calculateCodePoint(cp);\n            });\n            return [\n                n,\n                l\n            ];\n        };\n        return utfx;\n    }();\n    Date.now = Date.now || function() {\n        return +new Date;\n    };\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */ var BCRYPT_SALT_LEN = 16;\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */ var GENSALT_DEFAULT_LOG2_ROUNDS = 10;\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */ var BLOWFISH_NUM_ROUNDS = 16;\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */ var MAX_EXECUTION_TIME = 100;\n    /**\r\n     * @type {Array.<number>}\r\n     * @const\r\n     * @inner\r\n     */ var P_ORIG = [\n        0x243f6a88,\n        0x85a308d3,\n        0x13198a2e,\n        0x03707344,\n        0xa4093822,\n        0x299f31d0,\n        0x082efa98,\n        0xec4e6c89,\n        0x452821e6,\n        0x38d01377,\n        0xbe5466cf,\n        0x34e90c6c,\n        0xc0ac29b7,\n        0xc97c50dd,\n        0x3f84d5b5,\n        0xb5470917,\n        0x9216d5d9,\n        0x8979fb1b\n    ];\n    /**\r\n     * @type {Array.<number>}\r\n     * @const\r\n     * @inner\r\n     */ var S_ORIG = [\n        0xd1310ba6,\n        0x98dfb5ac,\n        0x2ffd72db,\n        0xd01adfb7,\n        0xb8e1afed,\n        0x6a267e96,\n        0xba7c9045,\n        0xf12c7f99,\n        0x24a19947,\n        0xb3916cf7,\n        0x0801f2e2,\n        0x858efc16,\n        0x636920d8,\n        0x71574e69,\n        0xa458fea3,\n        0xf4933d7e,\n        0x0d95748f,\n        0x728eb658,\n        0x718bcd58,\n        0x82154aee,\n        0x7b54a41d,\n        0xc25a59b5,\n        0x9c30d539,\n        0x2af26013,\n        0xc5d1b023,\n        0x286085f0,\n        0xca417918,\n        0xb8db38ef,\n        0x8e79dcb0,\n        0x603a180e,\n        0x6c9e0e8b,\n        0xb01e8a3e,\n        0xd71577c1,\n        0xbd314b27,\n        0x78af2fda,\n        0x55605c60,\n        0xe65525f3,\n        0xaa55ab94,\n        0x57489862,\n        0x63e81440,\n        0x55ca396a,\n        0x2aab10b6,\n        0xb4cc5c34,\n        0x1141e8ce,\n        0xa15486af,\n        0x7c72e993,\n        0xb3ee1411,\n        0x636fbc2a,\n        0x2ba9c55d,\n        0x741831f6,\n        0xce5c3e16,\n        0x9b87931e,\n        0xafd6ba33,\n        0x6c24cf5c,\n        0x7a325381,\n        0x28958677,\n        0x3b8f4898,\n        0x6b4bb9af,\n        0xc4bfe81b,\n        0x66282193,\n        0x61d809cc,\n        0xfb21a991,\n        0x487cac60,\n        0x5dec8032,\n        0xef845d5d,\n        0xe98575b1,\n        0xdc262302,\n        0xeb651b88,\n        0x23893e81,\n        0xd396acc5,\n        0x0f6d6ff3,\n        0x83f44239,\n        0x2e0b4482,\n        0xa4842004,\n        0x69c8f04a,\n        0x9e1f9b5e,\n        0x21c66842,\n        0xf6e96c9a,\n        0x670c9c61,\n        0xabd388f0,\n        0x6a51a0d2,\n        0xd8542f68,\n        0x960fa728,\n        0xab5133a3,\n        0x6eef0b6c,\n        0x137a3be4,\n        0xba3bf050,\n        0x7efb2a98,\n        0xa1f1651d,\n        0x39af0176,\n        0x66ca593e,\n        0x82430e88,\n        0x8cee8619,\n        0x456f9fb4,\n        0x7d84a5c3,\n        0x3b8b5ebe,\n        0xe06f75d8,\n        0x85c12073,\n        0x401a449f,\n        0x56c16aa6,\n        0x4ed3aa62,\n        0x363f7706,\n        0x1bfedf72,\n        0x429b023d,\n        0x37d0d724,\n        0xd00a1248,\n        0xdb0fead3,\n        0x49f1c09b,\n        0x075372c9,\n        0x80991b7b,\n        0x25d479d8,\n        0xf6e8def7,\n        0xe3fe501a,\n        0xb6794c3b,\n        0x976ce0bd,\n        0x04c006ba,\n        0xc1a94fb6,\n        0x409f60c4,\n        0x5e5c9ec2,\n        0x196a2463,\n        0x68fb6faf,\n        0x3e6c53b5,\n        0x1339b2eb,\n        0x3b52ec6f,\n        0x6dfc511f,\n        0x9b30952c,\n        0xcc814544,\n        0xaf5ebd09,\n        0xbee3d004,\n        0xde334afd,\n        0x660f2807,\n        0x192e4bb3,\n        0xc0cba857,\n        0x45c8740f,\n        0xd20b5f39,\n        0xb9d3fbdb,\n        0x5579c0bd,\n        0x1a60320a,\n        0xd6a100c6,\n        0x402c7279,\n        0x679f25fe,\n        0xfb1fa3cc,\n        0x8ea5e9f8,\n        0xdb3222f8,\n        0x3c7516df,\n        0xfd616b15,\n        0x2f501ec8,\n        0xad0552ab,\n        0x323db5fa,\n        0xfd238760,\n        0x53317b48,\n        0x3e00df82,\n        0x9e5c57bb,\n        0xca6f8ca0,\n        0x1a87562e,\n        0xdf1769db,\n        0xd542a8f6,\n        0x287effc3,\n        0xac6732c6,\n        0x8c4f5573,\n        0x695b27b0,\n        0xbbca58c8,\n        0xe1ffa35d,\n        0xb8f011a0,\n        0x10fa3d98,\n        0xfd2183b8,\n        0x4afcb56c,\n        0x2dd1d35b,\n        0x9a53e479,\n        0xb6f84565,\n        0xd28e49bc,\n        0x4bfb9790,\n        0xe1ddf2da,\n        0xa4cb7e33,\n        0x62fb1341,\n        0xcee4c6e8,\n        0xef20cada,\n        0x36774c01,\n        0xd07e9efe,\n        0x2bf11fb4,\n        0x95dbda4d,\n        0xae909198,\n        0xeaad8e71,\n        0x6b93d5a0,\n        0xd08ed1d0,\n        0xafc725e0,\n        0x8e3c5b2f,\n        0x8e7594b7,\n        0x8ff6e2fb,\n        0xf2122b64,\n        0x8888b812,\n        0x900df01c,\n        0x4fad5ea0,\n        0x688fc31c,\n        0xd1cff191,\n        0xb3a8c1ad,\n        0x2f2f2218,\n        0xbe0e1777,\n        0xea752dfe,\n        0x8b021fa1,\n        0xe5a0cc0f,\n        0xb56f74e8,\n        0x18acf3d6,\n        0xce89e299,\n        0xb4a84fe0,\n        0xfd13e0b7,\n        0x7cc43b81,\n        0xd2ada8d9,\n        0x165fa266,\n        0x80957705,\n        0x93cc7314,\n        0x211a1477,\n        0xe6ad2065,\n        0x77b5fa86,\n        0xc75442f5,\n        0xfb9d35cf,\n        0xebcdaf0c,\n        0x7b3e89a0,\n        0xd6411bd3,\n        0xae1e7e49,\n        0x00250e2d,\n        0x2071b35e,\n        0x226800bb,\n        0x57b8e0af,\n        0x2464369b,\n        0xf009b91e,\n        0x5563911d,\n        0x59dfa6aa,\n        0x78c14389,\n        0xd95a537f,\n        0x207d5ba2,\n        0x02e5b9c5,\n        0x83260376,\n        0x6295cfa9,\n        0x11c81968,\n        0x4e734a41,\n        0xb3472dca,\n        0x7b14a94a,\n        0x1b510052,\n        0x9a532915,\n        0xd60f573f,\n        0xbc9bc6e4,\n        0x2b60a476,\n        0x81e67400,\n        0x08ba6fb5,\n        0x571be91f,\n        0xf296ec6b,\n        0x2a0dd915,\n        0xb6636521,\n        0xe7b9f9b6,\n        0xff34052e,\n        0xc5855664,\n        0x53b02d5d,\n        0xa99f8fa1,\n        0x08ba4799,\n        0x6e85076a,\n        0x4b7a70e9,\n        0xb5b32944,\n        0xdb75092e,\n        0xc4192623,\n        0xad6ea6b0,\n        0x49a7df7d,\n        0x9cee60b8,\n        0x8fedb266,\n        0xecaa8c71,\n        0x699a17ff,\n        0x5664526c,\n        0xc2b19ee1,\n        0x193602a5,\n        0x75094c29,\n        0xa0591340,\n        0xe4183a3e,\n        0x3f54989a,\n        0x5b429d65,\n        0x6b8fe4d6,\n        0x99f73fd6,\n        0xa1d29c07,\n        0xefe830f5,\n        0x4d2d38e6,\n        0xf0255dc1,\n        0x4cdd2086,\n        0x8470eb26,\n        0x6382e9c6,\n        0x021ecc5e,\n        0x09686b3f,\n        0x3ebaefc9,\n        0x3c971814,\n        0x6b6a70a1,\n        0x687f3584,\n        0x52a0e286,\n        0xb79c5305,\n        0xaa500737,\n        0x3e07841c,\n        0x7fdeae5c,\n        0x8e7d44ec,\n        0x5716f2b8,\n        0xb03ada37,\n        0xf0500c0d,\n        0xf01c1f04,\n        0x0200b3ff,\n        0xae0cf51a,\n        0x3cb574b2,\n        0x25837a58,\n        0xdc0921bd,\n        0xd19113f9,\n        0x7ca92ff6,\n        0x94324773,\n        0x22f54701,\n        0x3ae5e581,\n        0x37c2dadc,\n        0xc8b57634,\n        0x9af3dda7,\n        0xa9446146,\n        0x0fd0030e,\n        0xecc8c73e,\n        0xa4751e41,\n        0xe238cd99,\n        0x3bea0e2f,\n        0x3280bba1,\n        0x183eb331,\n        0x4e548b38,\n        0x4f6db908,\n        0x6f420d03,\n        0xf60a04bf,\n        0x2cb81290,\n        0x24977c79,\n        0x5679b072,\n        0xbcaf89af,\n        0xde9a771f,\n        0xd9930810,\n        0xb38bae12,\n        0xdccf3f2e,\n        0x5512721f,\n        0x2e6b7124,\n        0x501adde6,\n        0x9f84cd87,\n        0x7a584718,\n        0x7408da17,\n        0xbc9f9abc,\n        0xe94b7d8c,\n        0xec7aec3a,\n        0xdb851dfa,\n        0x63094366,\n        0xc464c3d2,\n        0xef1c1847,\n        0x3215d908,\n        0xdd433b37,\n        0x24c2ba16,\n        0x12a14d43,\n        0x2a65c451,\n        0x50940002,\n        0x133ae4dd,\n        0x71dff89e,\n        0x10314e55,\n        0x81ac77d6,\n        0x5f11199b,\n        0x043556f1,\n        0xd7a3c76b,\n        0x3c11183b,\n        0x5924a509,\n        0xf28fe6ed,\n        0x97f1fbfa,\n        0x9ebabf2c,\n        0x1e153c6e,\n        0x86e34570,\n        0xeae96fb1,\n        0x860e5e0a,\n        0x5a3e2ab3,\n        0x771fe71c,\n        0x4e3d06fa,\n        0x2965dcb9,\n        0x99e71d0f,\n        0x803e89d6,\n        0x5266c825,\n        0x2e4cc978,\n        0x9c10b36a,\n        0xc6150eba,\n        0x94e2ea78,\n        0xa5fc3c53,\n        0x1e0a2df4,\n        0xf2f74ea7,\n        0x361d2b3d,\n        0x1939260f,\n        0x19c27960,\n        0x5223a708,\n        0xf71312b6,\n        0xebadfe6e,\n        0xeac31f66,\n        0xe3bc4595,\n        0xa67bc883,\n        0xb17f37d1,\n        0x018cff28,\n        0xc332ddef,\n        0xbe6c5aa5,\n        0x65582185,\n        0x68ab9802,\n        0xeecea50f,\n        0xdb2f953b,\n        0x2aef7dad,\n        0x5b6e2f84,\n        0x1521b628,\n        0x29076170,\n        0xecdd4775,\n        0x619f1510,\n        0x13cca830,\n        0xeb61bd96,\n        0x0334fe1e,\n        0xaa0363cf,\n        0xb5735c90,\n        0x4c70a239,\n        0xd59e9e0b,\n        0xcbaade14,\n        0xeecc86bc,\n        0x60622ca7,\n        0x9cab5cab,\n        0xb2f3846e,\n        0x648b1eaf,\n        0x19bdf0ca,\n        0xa02369b9,\n        0x655abb50,\n        0x40685a32,\n        0x3c2ab4b3,\n        0x319ee9d5,\n        0xc021b8f7,\n        0x9b540b19,\n        0x875fa099,\n        0x95f7997e,\n        0x623d7da8,\n        0xf837889a,\n        0x97e32d77,\n        0x11ed935f,\n        0x16681281,\n        0x0e358829,\n        0xc7e61fd6,\n        0x96dedfa1,\n        0x7858ba99,\n        0x57f584a5,\n        0x1b227263,\n        0x9b83c3ff,\n        0x1ac24696,\n        0xcdb30aeb,\n        0x532e3054,\n        0x8fd948e4,\n        0x6dbc3128,\n        0x58ebf2ef,\n        0x34c6ffea,\n        0xfe28ed61,\n        0xee7c3c73,\n        0x5d4a14d9,\n        0xe864b7e3,\n        0x42105d14,\n        0x203e13e0,\n        0x45eee2b6,\n        0xa3aaabea,\n        0xdb6c4f15,\n        0xfacb4fd0,\n        0xc742f442,\n        0xef6abbb5,\n        0x654f3b1d,\n        0x41cd2105,\n        0xd81e799e,\n        0x86854dc7,\n        0xe44b476a,\n        0x3d816250,\n        0xcf62a1f2,\n        0x5b8d2646,\n        0xfc8883a0,\n        0xc1c7b6a3,\n        0x7f1524c3,\n        0x69cb7492,\n        0x47848a0b,\n        0x5692b285,\n        0x095bbf00,\n        0xad19489d,\n        0x1462b174,\n        0x23820e00,\n        0x58428d2a,\n        0x0c55f5ea,\n        0x1dadf43e,\n        0x233f7061,\n        0x3372f092,\n        0x8d937e41,\n        0xd65fecf1,\n        0x6c223bdb,\n        0x7cde3759,\n        0xcbee7460,\n        0x4085f2a7,\n        0xce77326e,\n        0xa6078084,\n        0x19f8509e,\n        0xe8efd855,\n        0x61d99735,\n        0xa969a7aa,\n        0xc50c06c2,\n        0x5a04abfc,\n        0x800bcadc,\n        0x9e447a2e,\n        0xc3453484,\n        0xfdd56705,\n        0x0e1e9ec9,\n        0xdb73dbd3,\n        0x105588cd,\n        0x675fda79,\n        0xe3674340,\n        0xc5c43465,\n        0x713e38d8,\n        0x3d28f89e,\n        0xf16dff20,\n        0x153e21e7,\n        0x8fb03d4a,\n        0xe6e39f2b,\n        0xdb83adf7,\n        0xe93d5a68,\n        0x948140f7,\n        0xf64c261c,\n        0x94692934,\n        0x411520f7,\n        0x7602d4f7,\n        0xbcf46b2e,\n        0xd4a20068,\n        0xd4082471,\n        0x3320f46a,\n        0x43b7d4b7,\n        0x500061af,\n        0x1e39f62e,\n        0x97244546,\n        0x14214f74,\n        0xbf8b8840,\n        0x4d95fc1d,\n        0x96b591af,\n        0x70f4ddd3,\n        0x66a02f45,\n        0xbfbc09ec,\n        0x03bd9785,\n        0x7fac6dd0,\n        0x31cb8504,\n        0x96eb27b3,\n        0x55fd3941,\n        0xda2547e6,\n        0xabca0a9a,\n        0x28507825,\n        0x530429f4,\n        0x0a2c86da,\n        0xe9b66dfb,\n        0x68dc1462,\n        0xd7486900,\n        0x680ec0a4,\n        0x27a18dee,\n        0x4f3ffea2,\n        0xe887ad8c,\n        0xb58ce006,\n        0x7af4d6b6,\n        0xaace1e7c,\n        0xd3375fec,\n        0xce78a399,\n        0x406b2a42,\n        0x20fe9e35,\n        0xd9f385b9,\n        0xee39d7ab,\n        0x3b124e8b,\n        0x1dc9faf7,\n        0x4b6d1856,\n        0x26a36631,\n        0xeae397b2,\n        0x3a6efa74,\n        0xdd5b4332,\n        0x6841e7f7,\n        0xca7820fb,\n        0xfb0af54e,\n        0xd8feb397,\n        0x454056ac,\n        0xba489527,\n        0x55533a3a,\n        0x20838d87,\n        0xfe6ba9b7,\n        0xd096954b,\n        0x55a867bc,\n        0xa1159a58,\n        0xcca92963,\n        0x99e1db33,\n        0xa62a4a56,\n        0x3f3125f9,\n        0x5ef47e1c,\n        0x9029317c,\n        0xfdf8e802,\n        0x04272f70,\n        0x80bb155c,\n        0x05282ce3,\n        0x95c11548,\n        0xe4c66d22,\n        0x48c1133f,\n        0xc70f86dc,\n        0x07f9c9ee,\n        0x41041f0f,\n        0x404779a4,\n        0x5d886e17,\n        0x325f51eb,\n        0xd59bc0d1,\n        0xf2bcc18f,\n        0x41113564,\n        0x257b7834,\n        0x602a9c60,\n        0xdff8e8a3,\n        0x1f636c1b,\n        0x0e12b4c2,\n        0x02e1329e,\n        0xaf664fd1,\n        0xcad18115,\n        0x6b2395e0,\n        0x333e92e1,\n        0x3b240b62,\n        0xeebeb922,\n        0x85b2a20e,\n        0xe6ba0d99,\n        0xde720c8c,\n        0x2da2f728,\n        0xd0127845,\n        0x95b794fd,\n        0x647d0862,\n        0xe7ccf5f0,\n        0x5449a36f,\n        0x877d48fa,\n        0xc39dfd27,\n        0xf33e8d1e,\n        0x0a476341,\n        0x992eff74,\n        0x3a6f6eab,\n        0xf4f8fd37,\n        0xa812dc60,\n        0xa1ebddf8,\n        0x991be14c,\n        0xdb6e6b0d,\n        0xc67b5510,\n        0x6d672c37,\n        0x2765d43b,\n        0xdcd0e804,\n        0xf1290dc7,\n        0xcc00ffa3,\n        0xb5390f92,\n        0x690fed0b,\n        0x667b9ffb,\n        0xcedb7d9c,\n        0xa091cf0b,\n        0xd9155ea3,\n        0xbb132f88,\n        0x515bad24,\n        0x7b9479bf,\n        0x763bd6eb,\n        0x37392eb3,\n        0xcc115979,\n        0x8026e297,\n        0xf42e312d,\n        0x6842ada7,\n        0xc66a2b3b,\n        0x12754ccc,\n        0x782ef11c,\n        0x6a124237,\n        0xb79251e7,\n        0x06a1bbe6,\n        0x4bfb6350,\n        0x1a6b1018,\n        0x11caedfa,\n        0x3d25bdd8,\n        0xe2e1c3c9,\n        0x44421659,\n        0x0a121386,\n        0xd90cec6e,\n        0xd5abea2a,\n        0x64af674e,\n        0xda86a85f,\n        0xbebfe988,\n        0x64e4c3fe,\n        0x9dbc8057,\n        0xf0f7c086,\n        0x60787bf8,\n        0x6003604d,\n        0xd1fd8346,\n        0xf6381fb0,\n        0x7745ae04,\n        0xd736fccc,\n        0x83426b33,\n        0xf01eab71,\n        0xb0804187,\n        0x3c005e5f,\n        0x77a057be,\n        0xbde8ae24,\n        0x55464299,\n        0xbf582e61,\n        0x4e58f48f,\n        0xf2ddfda2,\n        0xf474ef38,\n        0x8789bdc2,\n        0x5366f9c3,\n        0xc8b38e74,\n        0xb475f255,\n        0x46fcd9b9,\n        0x7aeb2661,\n        0x8b1ddf84,\n        0x846a0e79,\n        0x915f95e2,\n        0x466e598e,\n        0x20b45770,\n        0x8cd55591,\n        0xc902de4c,\n        0xb90bace1,\n        0xbb8205d0,\n        0x11a86248,\n        0x7574a99e,\n        0xb77f19b6,\n        0xe0a9dc09,\n        0x662d09a1,\n        0xc4324633,\n        0xe85a1f02,\n        0x09f0be8c,\n        0x4a99a025,\n        0x1d6efe10,\n        0x1ab93d1d,\n        0x0ba5a4df,\n        0xa186f20f,\n        0x2868f169,\n        0xdcb7da83,\n        0x573906fe,\n        0xa1e2ce9b,\n        0x4fcd7f52,\n        0x50115e01,\n        0xa70683fa,\n        0xa002b5c4,\n        0x0de6d027,\n        0x9af88c27,\n        0x773f8641,\n        0xc3604c06,\n        0x61a806b5,\n        0xf0177a28,\n        0xc0f586e0,\n        0x006058aa,\n        0x30dc7d62,\n        0x11e69ed7,\n        0x2338ea63,\n        0x53c2dd94,\n        0xc2c21634,\n        0xbbcbee56,\n        0x90bcb6de,\n        0xebfc7da1,\n        0xce591d76,\n        0x6f05e409,\n        0x4b7c0188,\n        0x39720a3d,\n        0x7c927c24,\n        0x86e3725f,\n        0x724d9db9,\n        0x1ac15bb4,\n        0xd39eb8fc,\n        0xed545578,\n        0x08fca5b5,\n        0xd83d7cd3,\n        0x4dad0fc4,\n        0x1e50ef5e,\n        0xb161e6f8,\n        0xa28514d9,\n        0x6c51133c,\n        0x6fd5c7e7,\n        0x56e14ec4,\n        0x362abfce,\n        0xddc6c837,\n        0xd79a3234,\n        0x92638212,\n        0x670efa8e,\n        0x406000e0,\n        0x3a39ce37,\n        0xd3faf5cf,\n        0xabc27737,\n        0x5ac52d1b,\n        0x5cb0679e,\n        0x4fa33742,\n        0xd3822740,\n        0x99bc9bbe,\n        0xd5118e9d,\n        0xbf0f7315,\n        0xd62d1c7e,\n        0xc700c47b,\n        0xb78c1b6b,\n        0x21a19045,\n        0xb26eb1be,\n        0x6a366eb4,\n        0x5748ab2f,\n        0xbc946e79,\n        0xc6a376d2,\n        0x6549c2c8,\n        0x530ff8ee,\n        0x468dde7d,\n        0xd5730a1d,\n        0x4cd04dc6,\n        0x2939bbdb,\n        0xa9ba4650,\n        0xac9526e8,\n        0xbe5ee304,\n        0xa1fad5f0,\n        0x6a2d519a,\n        0x63ef8ce2,\n        0x9a86ee22,\n        0xc089c2b8,\n        0x43242ef6,\n        0xa51e03aa,\n        0x9cf2d0a4,\n        0x83c061ba,\n        0x9be96a4d,\n        0x8fe51550,\n        0xba645bd6,\n        0x2826a2f9,\n        0xa73a3ae1,\n        0x4ba99586,\n        0xef5562e9,\n        0xc72fefd3,\n        0xf752f7da,\n        0x3f046f69,\n        0x77fa0a59,\n        0x80e4a915,\n        0x87b08601,\n        0x9b09e6ad,\n        0x3b3ee593,\n        0xe990fd5a,\n        0x9e34d797,\n        0x2cf0b7d9,\n        0x022b8b51,\n        0x96d5ac3a,\n        0x017da67d,\n        0xd1cf3ed6,\n        0x7c7d2d28,\n        0x1f9f25cf,\n        0xadf2b89b,\n        0x5ad6b472,\n        0x5a88f54c,\n        0xe029ac71,\n        0xe019a5e6,\n        0x47b0acfd,\n        0xed93fa9b,\n        0xe8d3c48d,\n        0x283b57cc,\n        0xf8d56629,\n        0x79132e28,\n        0x785f0191,\n        0xed756055,\n        0xf7960e44,\n        0xe3d35e8c,\n        0x15056dd4,\n        0x88f46dba,\n        0x03a16125,\n        0x0564f0bd,\n        0xc3eb9e15,\n        0x3c9057a2,\n        0x97271aec,\n        0xa93a072a,\n        0x1b3f6d9b,\n        0x1e6321f5,\n        0xf59c66fb,\n        0x26dcf319,\n        0x7533d928,\n        0xb155fdf5,\n        0x03563482,\n        0x8aba3cbb,\n        0x28517711,\n        0xc20ad9f8,\n        0xabcc5167,\n        0xccad925f,\n        0x4de81751,\n        0x3830dc8e,\n        0x379d5862,\n        0x9320f991,\n        0xea7a90c2,\n        0xfb3e7bce,\n        0x5121ce64,\n        0x774fbe32,\n        0xa8b6e37e,\n        0xc3293d46,\n        0x48de5369,\n        0x6413e680,\n        0xa2ae0810,\n        0xdd6db224,\n        0x69852dfd,\n        0x09072166,\n        0xb39a460a,\n        0x6445c0dd,\n        0x586cdecf,\n        0x1c20c8ae,\n        0x5bbef7dd,\n        0x1b588d40,\n        0xccd2017f,\n        0x6bb4e3bb,\n        0xdda26a7e,\n        0x3a59ff45,\n        0x3e350a44,\n        0xbcb4cdd5,\n        0x72eacea8,\n        0xfa6484bb,\n        0x8d6612ae,\n        0xbf3c6f47,\n        0xd29be463,\n        0x542f5d9e,\n        0xaec2771b,\n        0xf64e6370,\n        0x740e0d8d,\n        0xe75b1357,\n        0xf8721671,\n        0xaf537d5d,\n        0x4040cb08,\n        0x4eb4e2cc,\n        0x34d2466a,\n        0x0115af84,\n        0xe1b00428,\n        0x95983a1d,\n        0x06b89fb4,\n        0xce6ea048,\n        0x6f3f3b82,\n        0x3520ab82,\n        0x011a1d4b,\n        0x277227f8,\n        0x611560b1,\n        0xe7933fdc,\n        0xbb3a792b,\n        0x344525bd,\n        0xa08839e1,\n        0x51ce794b,\n        0x2f32c9b7,\n        0xa01fbac9,\n        0xe01cc87e,\n        0xbcc7d1f6,\n        0xcf0111c3,\n        0xa1e8aac7,\n        0x1a908749,\n        0xd44fbd9a,\n        0xd0dadecb,\n        0xd50ada38,\n        0x0339c32a,\n        0xc6913667,\n        0x8df9317c,\n        0xe0b12b4f,\n        0xf79e59b7,\n        0x43f5bb3a,\n        0xf2d519ff,\n        0x27d9459c,\n        0xbf97222c,\n        0x15e6fc2a,\n        0x0f91fc71,\n        0x9b941525,\n        0xfae59361,\n        0xceb69ceb,\n        0xc2a86459,\n        0x12baa8d1,\n        0xb6c1075e,\n        0xe3056a0c,\n        0x10d25065,\n        0xcb03a442,\n        0xe0ec6e0e,\n        0x1698db3b,\n        0x4c98a0be,\n        0x3278e964,\n        0x9f1f9532,\n        0xe0d392df,\n        0xd3a0342b,\n        0x8971f21e,\n        0x1b0a7441,\n        0x4ba3348c,\n        0xc5be7120,\n        0xc37632d8,\n        0xdf359f8d,\n        0x9b992f2e,\n        0xe60b6f47,\n        0x0fe3f11d,\n        0xe54cda54,\n        0x1edad891,\n        0xce6279cf,\n        0xcd3e7e6f,\n        0x1618b166,\n        0xfd2c1d05,\n        0x848fd2c5,\n        0xf6fb2299,\n        0xf523f357,\n        0xa6327623,\n        0x93a83531,\n        0x56cccd02,\n        0xacf08162,\n        0x5a75ebb5,\n        0x6e163697,\n        0x88d273cc,\n        0xde966292,\n        0x81b949d0,\n        0x4c50901b,\n        0x71c65614,\n        0xe6c6c7bd,\n        0x327a140a,\n        0x45e1d006,\n        0xc3f27b9a,\n        0xc9aa53fd,\n        0x62a80f00,\n        0xbb25bfe2,\n        0x35bdd2f6,\n        0x71126905,\n        0xb2040222,\n        0xb6cbcf7c,\n        0xcd769c2b,\n        0x53113ec0,\n        0x1640e3d3,\n        0x38abbd60,\n        0x2547adf0,\n        0xba38209c,\n        0xf746ce76,\n        0x77afa1c5,\n        0x20756060,\n        0x85cbfe4e,\n        0x8ae88dd8,\n        0x7aaaf9b0,\n        0x4cf9aa7e,\n        0x1948c25c,\n        0x02fb8a8c,\n        0x01c36ae4,\n        0xd6ebe1f9,\n        0x90d4f869,\n        0xa65cdea0,\n        0x3f09252d,\n        0xc208e69f,\n        0xb74e6132,\n        0xce77e25b,\n        0x578fdfe3,\n        0x3ac372e6\n    ];\n    /**\r\n     * @type {Array.<number>}\r\n     * @const\r\n     * @inner\r\n     */ var C_ORIG = [\n        0x4f727068,\n        0x65616e42,\n        0x65686f6c,\n        0x64657253,\n        0x63727944,\n        0x6f756274\n    ];\n    /**\r\n     * @param {Array.<number>} lr\r\n     * @param {number} off\r\n     * @param {Array.<number>} P\r\n     * @param {Array.<number>} S\r\n     * @returns {Array.<number>}\r\n     * @inner\r\n     */ function _encipher(lr, off, P, S) {\n        var n, l = lr[off], r = lr[off + 1];\n        l ^= P[0];\n        /*\r\n        for (var i=0, k=BLOWFISH_NUM_ROUNDS-2; i<=k;)\r\n            // Feistel substitution on left word\r\n            n  = S[l >>> 24],\r\n            n += S[0x100 | ((l >> 16) & 0xff)],\r\n            n ^= S[0x200 | ((l >> 8) & 0xff)],\r\n            n += S[0x300 | (l & 0xff)],\r\n            r ^= n ^ P[++i],\r\n            // Feistel substitution on right word\r\n            n  = S[r >>> 24],\r\n            n += S[0x100 | ((r >> 16) & 0xff)],\r\n            n ^= S[0x200 | ((r >> 8) & 0xff)],\r\n            n += S[0x300 | (r & 0xff)],\r\n            l ^= n ^ P[++i];\r\n        */ //The following is an unrolled version of the above loop.\n        //Iteration 0\n        n = S[l >>> 24];\n        n += S[0x100 | l >> 16 & 0xff];\n        n ^= S[0x200 | l >> 8 & 0xff];\n        n += S[0x300 | l & 0xff];\n        r ^= n ^ P[1];\n        n = S[r >>> 24];\n        n += S[0x100 | r >> 16 & 0xff];\n        n ^= S[0x200 | r >> 8 & 0xff];\n        n += S[0x300 | r & 0xff];\n        l ^= n ^ P[2];\n        //Iteration 1\n        n = S[l >>> 24];\n        n += S[0x100 | l >> 16 & 0xff];\n        n ^= S[0x200 | l >> 8 & 0xff];\n        n += S[0x300 | l & 0xff];\n        r ^= n ^ P[3];\n        n = S[r >>> 24];\n        n += S[0x100 | r >> 16 & 0xff];\n        n ^= S[0x200 | r >> 8 & 0xff];\n        n += S[0x300 | r & 0xff];\n        l ^= n ^ P[4];\n        //Iteration 2\n        n = S[l >>> 24];\n        n += S[0x100 | l >> 16 & 0xff];\n        n ^= S[0x200 | l >> 8 & 0xff];\n        n += S[0x300 | l & 0xff];\n        r ^= n ^ P[5];\n        n = S[r >>> 24];\n        n += S[0x100 | r >> 16 & 0xff];\n        n ^= S[0x200 | r >> 8 & 0xff];\n        n += S[0x300 | r & 0xff];\n        l ^= n ^ P[6];\n        //Iteration 3\n        n = S[l >>> 24];\n        n += S[0x100 | l >> 16 & 0xff];\n        n ^= S[0x200 | l >> 8 & 0xff];\n        n += S[0x300 | l & 0xff];\n        r ^= n ^ P[7];\n        n = S[r >>> 24];\n        n += S[0x100 | r >> 16 & 0xff];\n        n ^= S[0x200 | r >> 8 & 0xff];\n        n += S[0x300 | r & 0xff];\n        l ^= n ^ P[8];\n        //Iteration 4\n        n = S[l >>> 24];\n        n += S[0x100 | l >> 16 & 0xff];\n        n ^= S[0x200 | l >> 8 & 0xff];\n        n += S[0x300 | l & 0xff];\n        r ^= n ^ P[9];\n        n = S[r >>> 24];\n        n += S[0x100 | r >> 16 & 0xff];\n        n ^= S[0x200 | r >> 8 & 0xff];\n        n += S[0x300 | r & 0xff];\n        l ^= n ^ P[10];\n        //Iteration 5\n        n = S[l >>> 24];\n        n += S[0x100 | l >> 16 & 0xff];\n        n ^= S[0x200 | l >> 8 & 0xff];\n        n += S[0x300 | l & 0xff];\n        r ^= n ^ P[11];\n        n = S[r >>> 24];\n        n += S[0x100 | r >> 16 & 0xff];\n        n ^= S[0x200 | r >> 8 & 0xff];\n        n += S[0x300 | r & 0xff];\n        l ^= n ^ P[12];\n        //Iteration 6\n        n = S[l >>> 24];\n        n += S[0x100 | l >> 16 & 0xff];\n        n ^= S[0x200 | l >> 8 & 0xff];\n        n += S[0x300 | l & 0xff];\n        r ^= n ^ P[13];\n        n = S[r >>> 24];\n        n += S[0x100 | r >> 16 & 0xff];\n        n ^= S[0x200 | r >> 8 & 0xff];\n        n += S[0x300 | r & 0xff];\n        l ^= n ^ P[14];\n        //Iteration 7\n        n = S[l >>> 24];\n        n += S[0x100 | l >> 16 & 0xff];\n        n ^= S[0x200 | l >> 8 & 0xff];\n        n += S[0x300 | l & 0xff];\n        r ^= n ^ P[15];\n        n = S[r >>> 24];\n        n += S[0x100 | r >> 16 & 0xff];\n        n ^= S[0x200 | r >> 8 & 0xff];\n        n += S[0x300 | r & 0xff];\n        l ^= n ^ P[16];\n        lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];\n        lr[off + 1] = l;\n        return lr;\n    }\n    /**\r\n     * @param {Array.<number>} data\r\n     * @param {number} offp\r\n     * @returns {{key: number, offp: number}}\r\n     * @inner\r\n     */ function _streamtoword(data, offp) {\n        for(var i = 0, word = 0; i < 4; ++i)word = word << 8 | data[offp] & 0xff, offp = (offp + 1) % data.length;\n        return {\n            key: word,\n            offp: offp\n        };\n    }\n    /**\r\n     * @param {Array.<number>} key\r\n     * @param {Array.<number>} P\r\n     * @param {Array.<number>} S\r\n     * @inner\r\n     */ function _key(key, P, S) {\n        var offset = 0, lr = [\n            0,\n            0\n        ], plen = P.length, slen = S.length, sw;\n        for(var i = 0; i < plen; i++)sw = _streamtoword(key, offset), offset = sw.offp, P[i] = P[i] ^ sw.key;\n        for(i = 0; i < plen; i += 2)lr = _encipher(lr, 0, P, S), P[i] = lr[0], P[i + 1] = lr[1];\n        for(i = 0; i < slen; i += 2)lr = _encipher(lr, 0, P, S), S[i] = lr[0], S[i + 1] = lr[1];\n    }\n    /**\r\n     * Expensive key schedule Blowfish.\r\n     * @param {Array.<number>} data\r\n     * @param {Array.<number>} key\r\n     * @param {Array.<number>} P\r\n     * @param {Array.<number>} S\r\n     * @inner\r\n     */ function _ekskey(data, key, P, S) {\n        var offp = 0, lr = [\n            0,\n            0\n        ], plen = P.length, slen = S.length, sw;\n        for(var i = 0; i < plen; i++)sw = _streamtoword(key, offp), offp = sw.offp, P[i] = P[i] ^ sw.key;\n        offp = 0;\n        for(i = 0; i < plen; i += 2)sw = _streamtoword(data, offp), offp = sw.offp, lr[0] ^= sw.key, sw = _streamtoword(data, offp), offp = sw.offp, lr[1] ^= sw.key, lr = _encipher(lr, 0, P, S), P[i] = lr[0], P[i + 1] = lr[1];\n        for(i = 0; i < slen; i += 2)sw = _streamtoword(data, offp), offp = sw.offp, lr[0] ^= sw.key, sw = _streamtoword(data, offp), offp = sw.offp, lr[1] ^= sw.key, lr = _encipher(lr, 0, P, S), S[i] = lr[0], S[i + 1] = lr[1];\n    }\n    /**\r\n     * Internaly crypts a string.\r\n     * @param {Array.<number>} b Bytes to crypt\r\n     * @param {Array.<number>} salt Salt bytes to use\r\n     * @param {number} rounds Number of rounds\r\n     * @param {function(Error, Array.<number>=)=} callback Callback receiving the error, if any, and the resulting bytes. If\r\n     *  omitted, the operation will be performed synchronously.\r\n     *  @param {function(number)=} progressCallback Callback called with the current progress\r\n     * @returns {!Array.<number>|undefined} Resulting bytes if callback has been omitted, otherwise `undefined`\r\n     * @inner\r\n     */ function _crypt(b, salt, rounds, callback, progressCallback) {\n        var cdata = C_ORIG.slice(), clen = cdata.length, err;\n        // Validate\n        if (rounds < 4 || rounds > 31) {\n            err = Error(\"Illegal number of rounds (4-31): \" + rounds);\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            } else throw err;\n        }\n        if (salt.length !== BCRYPT_SALT_LEN) {\n            err = Error(\"Illegal salt length: \" + salt.length + \" != \" + BCRYPT_SALT_LEN);\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            } else throw err;\n        }\n        rounds = 1 << rounds >>> 0;\n        var P, S, i = 0, j;\n        //Use typed arrays when available - huge speedup!\n        if (Int32Array) {\n            P = new Int32Array(P_ORIG);\n            S = new Int32Array(S_ORIG);\n        } else {\n            P = P_ORIG.slice();\n            S = S_ORIG.slice();\n        }\n        _ekskey(salt, b, P, S);\n        /**\r\n         * Calcualtes the next round.\r\n         * @returns {Array.<number>|undefined} Resulting array if callback has been omitted, otherwise `undefined`\r\n         * @inner\r\n         */ function next() {\n            if (progressCallback) progressCallback(i / rounds);\n            if (i < rounds) {\n                var start = Date.now();\n                for(; i < rounds;){\n                    i = i + 1;\n                    _key(b, P, S);\n                    _key(salt, P, S);\n                    if (Date.now() - start > MAX_EXECUTION_TIME) break;\n                }\n            } else {\n                for(i = 0; i < 64; i++)for(j = 0; j < clen >> 1; j++)_encipher(cdata, j << 1, P, S);\n                var ret = [];\n                for(i = 0; i < clen; i++)ret.push((cdata[i] >> 24 & 0xff) >>> 0), ret.push((cdata[i] >> 16 & 0xff) >>> 0), ret.push((cdata[i] >> 8 & 0xff) >>> 0), ret.push((cdata[i] & 0xff) >>> 0);\n                if (callback) {\n                    callback(null, ret);\n                    return;\n                } else return ret;\n            }\n            if (callback) nextTick(next);\n        }\n        // Async\n        if (typeof callback !== \"undefined\") {\n            next();\n        // Sync\n        } else {\n            var res;\n            while(true)if (typeof (res = next()) !== \"undefined\") return res || [];\n        }\n    }\n    /**\r\n     * Internally hashes a string.\r\n     * @param {string} s String to hash\r\n     * @param {?string} salt Salt to use, actually never null\r\n     * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting hash. If omitted,\r\n     *  hashing is perormed synchronously.\r\n     *  @param {function(number)=} progressCallback Callback called with the current progress\r\n     * @returns {string|undefined} Resulting hash if callback has been omitted, otherwise `undefined`\r\n     * @inner\r\n     */ function _hash(s, salt, callback, progressCallback) {\n        var err;\n        if (typeof s !== \"string\" || typeof salt !== \"string\") {\n            err = Error(\"Invalid string / salt: Not a string\");\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            } else throw err;\n        }\n        // Validate the salt\n        var minor, offset;\n        if (salt.charAt(0) !== \"$\" || salt.charAt(1) !== \"2\") {\n            err = Error(\"Invalid salt version: \" + salt.substring(0, 2));\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            } else throw err;\n        }\n        if (salt.charAt(2) === \"$\") minor = String.fromCharCode(0), offset = 3;\n        else {\n            minor = salt.charAt(2);\n            if (minor !== \"a\" && minor !== \"b\" && minor !== \"y\" || salt.charAt(3) !== \"$\") {\n                err = Error(\"Invalid salt revision: \" + salt.substring(2, 4));\n                if (callback) {\n                    nextTick(callback.bind(this, err));\n                    return;\n                } else throw err;\n            }\n            offset = 4;\n        }\n        // Extract number of rounds\n        if (salt.charAt(offset + 2) > \"$\") {\n            err = Error(\"Missing salt rounds\");\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            } else throw err;\n        }\n        var r1 = parseInt(salt.substring(offset, offset + 1), 10) * 10, r2 = parseInt(salt.substring(offset + 1, offset + 2), 10), rounds = r1 + r2, real_salt = salt.substring(offset + 3, offset + 25);\n        s += minor >= \"a\" ? \"\\x00\" : \"\";\n        var passwordb = stringToBytes(s), saltb = base64_decode(real_salt, BCRYPT_SALT_LEN);\n        /**\r\n         * Finishes hashing.\r\n         * @param {Array.<number>} bytes Byte array\r\n         * @returns {string}\r\n         * @inner\r\n         */ function finish(bytes) {\n            var res = [];\n            res.push(\"$2\");\n            if (minor >= \"a\") res.push(minor);\n            res.push(\"$\");\n            if (rounds < 10) res.push(\"0\");\n            res.push(rounds.toString());\n            res.push(\"$\");\n            res.push(base64_encode(saltb, saltb.length));\n            res.push(base64_encode(bytes, C_ORIG.length * 4 - 1));\n            return res.join(\"\");\n        }\n        // Sync\n        if (typeof callback == \"undefined\") return finish(_crypt(passwordb, saltb, rounds));\n        else {\n            _crypt(passwordb, saltb, rounds, function(err, bytes) {\n                if (err) callback(err, null);\n                else callback(null, finish(bytes));\n            }, progressCallback);\n        }\n    }\n    /**\r\n     * Encodes a byte array to base64 with up to len bytes of input, using the custom bcrypt alphabet.\r\n     * @function\r\n     * @param {!Array.<number>} b Byte array\r\n     * @param {number} len Maximum input length\r\n     * @returns {string}\r\n     * @expose\r\n     */ bcrypt.encodeBase64 = base64_encode;\n    /**\r\n     * Decodes a base64 encoded string to up to len bytes of output, using the custom bcrypt alphabet.\r\n     * @function\r\n     * @param {string} s String to decode\r\n     * @param {number} len Maximum output length\r\n     * @returns {!Array.<number>}\r\n     * @expose\r\n     */ bcrypt.decodeBase64 = base64_decode;\n    return bcrypt;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/bcryptjs/dist/bcrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/bcryptjs/dist/bcrypt.js":
/*!**********************************************!*\
  !*** ./node_modules/bcryptjs/dist/bcrypt.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\r\n Copyright (c) 2012 Nevins Bartolomeo <nevins.bartolomeo@gmail.com>\r\n Copyright (c) 2012 Shane Girish <shaneGirish@gmail.com>\r\n Copyright (c) 2014 Daniel Wirtz <dcode@dcode.io>\r\n\r\n Redistribution and use in source and binary forms, with or without\r\n modification, are permitted provided that the following conditions\r\n are met:\r\n 1. Redistributions of source code must retain the above copyright\r\n notice, this list of conditions and the following disclaimer.\r\n 2. Redistributions in binary form must reproduce the above copyright\r\n notice, this list of conditions and the following disclaimer in the\r\n documentation and/or other materials provided with the distribution.\r\n 3. The name of the author may not be used to endorse or promote products\r\n derived from this software without specific prior written permission.\r\n\r\n THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\r\n IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\r\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */ /**\r\n * @license bcrypt.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/bcrypt.js for details\r\n */ (function(global, factory) {\n    /* AMD */ if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    else {}\n})(this, function() {\n    \"use strict\";\n    /**\r\n     * bcrypt namespace.\r\n     * @type {Object.<string,*>}\r\n     */ var bcrypt = {};\n    /**\r\n     * The random implementation to use as a fallback.\r\n     * @type {?function(number):!Array.<number>}\r\n     * @inner\r\n     */ var randomFallback = null;\n    /**\r\n     * Generates cryptographically secure random bytes.\r\n     * @function\r\n     * @param {number} len Bytes length\r\n     * @returns {!Array.<number>} Random bytes\r\n     * @throws {Error} If no random implementation is available\r\n     * @inner\r\n     */ function random(len) {\n        /* node */ if ( true && module && module[\"exports\"]) try {\n            return (__webpack_require__(/*! crypto */ \"crypto\").randomBytes)(len);\n        } catch (e) {}\n        /* WCA */ try {\n            var a;\n            (self[\"crypto\"] || self[\"msCrypto\"])[\"getRandomValues\"](a = new Uint32Array(len));\n            return Array.prototype.slice.call(a);\n        } catch (e) {}\n        /* fallback */ if (!randomFallback) throw Error(\"Neither WebCryptoAPI nor a crypto module is available. Use bcrypt.setRandomFallback to set an alternative\");\n        return randomFallback(len);\n    }\n    // Test if any secure randomness source is available\n    var randomAvailable = false;\n    try {\n        random(1);\n        randomAvailable = true;\n    } catch (e) {}\n    // Default fallback, if any\n    randomFallback = null;\n    /**\r\n     * Sets the pseudo random number generator to use as a fallback if neither node's `crypto` module nor the Web Crypto\r\n     *  API is available. Please note: It is highly important that the PRNG used is cryptographically secure and that it\r\n     *  is seeded properly!\r\n     * @param {?function(number):!Array.<number>} random Function taking the number of bytes to generate as its\r\n     *  sole argument, returning the corresponding array of cryptographically secure random byte values.\r\n     * @see http://nodejs.org/api/crypto.html\r\n     * @see http://www.w3.org/TR/WebCryptoAPI/\r\n     */ bcrypt.setRandomFallback = function(random) {\n        randomFallback = random;\n    };\n    /**\r\n     * Synchronously generates a salt.\r\n     * @param {number=} rounds Number of rounds to use, defaults to 10 if omitted\r\n     * @param {number=} seed_length Not supported.\r\n     * @returns {string} Resulting salt\r\n     * @throws {Error} If a random fallback is required but not set\r\n     * @expose\r\n     */ bcrypt.genSaltSync = function(rounds, seed_length) {\n        rounds = rounds || GENSALT_DEFAULT_LOG2_ROUNDS;\n        if (typeof rounds !== \"number\") throw Error(\"Illegal arguments: \" + typeof rounds + \", \" + typeof seed_length);\n        if (rounds < 4) rounds = 4;\n        else if (rounds > 31) rounds = 31;\n        var salt = [];\n        salt.push(\"$2a$\");\n        if (rounds < 10) salt.push(\"0\");\n        salt.push(rounds.toString());\n        salt.push(\"$\");\n        salt.push(base64_encode(random(BCRYPT_SALT_LEN), BCRYPT_SALT_LEN)); // May throw\n        return salt.join(\"\");\n    };\n    /**\r\n     * Asynchronously generates a salt.\r\n     * @param {(number|function(Error, string=))=} rounds Number of rounds to use, defaults to 10 if omitted\r\n     * @param {(number|function(Error, string=))=} seed_length Not supported.\r\n     * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting salt\r\n     * @returns {!Promise} If `callback` has been omitted\r\n     * @throws {Error} If `callback` is present but not a function\r\n     * @expose\r\n     */ bcrypt.genSalt = function(rounds, seed_length, callback) {\n        if (typeof seed_length === \"function\") callback = seed_length, seed_length = undefined; // Not supported.\n        if (typeof rounds === \"function\") callback = rounds, rounds = undefined;\n        if (typeof rounds === \"undefined\") rounds = GENSALT_DEFAULT_LOG2_ROUNDS;\n        else if (typeof rounds !== \"number\") throw Error(\"illegal arguments: \" + typeof rounds);\n        function _async(callback) {\n            nextTick(function() {\n                try {\n                    callback(null, bcrypt.genSaltSync(rounds));\n                } catch (err) {\n                    callback(err);\n                }\n            });\n        }\n        if (callback) {\n            if (typeof callback !== \"function\") throw Error(\"Illegal callback: \" + typeof callback);\n            _async(callback);\n        } else return new Promise(function(resolve, reject) {\n            _async(function(err, res) {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                resolve(res);\n            });\n        });\n    };\n    /**\r\n     * Synchronously generates a hash for the given string.\r\n     * @param {string} s String to hash\r\n     * @param {(number|string)=} salt Salt length to generate or salt to use, default to 10\r\n     * @returns {string} Resulting hash\r\n     * @expose\r\n     */ bcrypt.hashSync = function(s, salt) {\n        if (typeof salt === \"undefined\") salt = GENSALT_DEFAULT_LOG2_ROUNDS;\n        if (typeof salt === \"number\") salt = bcrypt.genSaltSync(salt);\n        if (typeof s !== \"string\" || typeof salt !== \"string\") throw Error(\"Illegal arguments: \" + typeof s + \", \" + typeof salt);\n        return _hash(s, salt);\n    };\n    /**\r\n     * Asynchronously generates a hash for the given string.\r\n     * @param {string} s String to hash\r\n     * @param {number|string} salt Salt length to generate or salt to use\r\n     * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting hash\r\n     * @param {function(number)=} progressCallback Callback successively called with the percentage of rounds completed\r\n     *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\r\n     * @returns {!Promise} If `callback` has been omitted\r\n     * @throws {Error} If `callback` is present but not a function\r\n     * @expose\r\n     */ bcrypt.hash = function(s, salt, callback, progressCallback) {\n        function _async(callback) {\n            if (typeof s === \"string\" && typeof salt === \"number\") bcrypt.genSalt(salt, function(err, salt) {\n                _hash(s, salt, callback, progressCallback);\n            });\n            else if (typeof s === \"string\" && typeof salt === \"string\") _hash(s, salt, callback, progressCallback);\n            else nextTick(callback.bind(this, Error(\"Illegal arguments: \" + typeof s + \", \" + typeof salt)));\n        }\n        if (callback) {\n            if (typeof callback !== \"function\") throw Error(\"Illegal callback: \" + typeof callback);\n            _async(callback);\n        } else return new Promise(function(resolve, reject) {\n            _async(function(err, res) {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                resolve(res);\n            });\n        });\n    };\n    /**\r\n     * Compares two strings of the same length in constant time.\r\n     * @param {string} known Must be of the correct length\r\n     * @param {string} unknown Must be the same length as `known`\r\n     * @returns {boolean}\r\n     * @inner\r\n     */ function safeStringCompare(known, unknown) {\n        var right = 0, wrong = 0;\n        for(var i = 0, k = known.length; i < k; ++i){\n            if (known.charCodeAt(i) === unknown.charCodeAt(i)) ++right;\n            else ++wrong;\n        }\n        // Prevent removal of unused variables (never true, actually)\n        if (right < 0) return false;\n        return wrong === 0;\n    }\n    /**\r\n     * Synchronously tests a string against a hash.\r\n     * @param {string} s String to compare\r\n     * @param {string} hash Hash to test against\r\n     * @returns {boolean} true if matching, otherwise false\r\n     * @throws {Error} If an argument is illegal\r\n     * @expose\r\n     */ bcrypt.compareSync = function(s, hash) {\n        if (typeof s !== \"string\" || typeof hash !== \"string\") throw Error(\"Illegal arguments: \" + typeof s + \", \" + typeof hash);\n        if (hash.length !== 60) return false;\n        return safeStringCompare(bcrypt.hashSync(s, hash.substr(0, hash.length - 31)), hash);\n    };\n    /**\r\n     * Asynchronously compares the given data against the given hash.\r\n     * @param {string} s Data to compare\r\n     * @param {string} hash Data to be compared to\r\n     * @param {function(Error, boolean)=} callback Callback receiving the error, if any, otherwise the result\r\n     * @param {function(number)=} progressCallback Callback successively called with the percentage of rounds completed\r\n     *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\r\n     * @returns {!Promise} If `callback` has been omitted\r\n     * @throws {Error} If `callback` is present but not a function\r\n     * @expose\r\n     */ bcrypt.compare = function(s, hash, callback, progressCallback) {\n        function _async(callback) {\n            if (typeof s !== \"string\" || typeof hash !== \"string\") {\n                nextTick(callback.bind(this, Error(\"Illegal arguments: \" + typeof s + \", \" + typeof hash)));\n                return;\n            }\n            if (hash.length !== 60) {\n                nextTick(callback.bind(this, null, false));\n                return;\n            }\n            bcrypt.hash(s, hash.substr(0, 29), function(err, comp) {\n                if (err) callback(err);\n                else callback(null, safeStringCompare(comp, hash));\n            }, progressCallback);\n        }\n        if (callback) {\n            if (typeof callback !== \"function\") throw Error(\"Illegal callback: \" + typeof callback);\n            _async(callback);\n        } else return new Promise(function(resolve, reject) {\n            _async(function(err, res) {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                resolve(res);\n            });\n        });\n    };\n    /**\r\n     * Gets the number of rounds used to encrypt the specified hash.\r\n     * @param {string} hash Hash to extract the used number of rounds from\r\n     * @returns {number} Number of rounds used\r\n     * @throws {Error} If `hash` is not a string\r\n     * @expose\r\n     */ bcrypt.getRounds = function(hash) {\n        if (typeof hash !== \"string\") throw Error(\"Illegal arguments: \" + typeof hash);\n        return parseInt(hash.split(\"$\")[2], 10);\n    };\n    /**\r\n     * Gets the salt portion from a hash. Does not validate the hash.\r\n     * @param {string} hash Hash to extract the salt from\r\n     * @returns {string} Extracted salt part\r\n     * @throws {Error} If `hash` is not a string or otherwise invalid\r\n     * @expose\r\n     */ bcrypt.getSalt = function(hash) {\n        if (typeof hash !== \"string\") throw Error(\"Illegal arguments: \" + typeof hash);\n        if (hash.length !== 60) throw Error(\"Illegal hash length: \" + hash.length + \" != 60\");\n        return hash.substring(0, 29);\n    };\n    /**\r\n     * Continues with the callback on the next tick.\r\n     * @function\r\n     * @param {function(...[*])} callback Callback to execute\r\n     * @inner\r\n     */ var nextTick = typeof process !== \"undefined\" && process && typeof process.nextTick === \"function\" ? typeof setImmediate === \"function\" ? setImmediate : process.nextTick : setTimeout;\n    /**\r\n     * Converts a JavaScript string to UTF8 bytes.\r\n     * @param {string} str String\r\n     * @returns {!Array.<number>} UTF8 bytes\r\n     * @inner\r\n     */ function stringToBytes(str) {\n        var out = [], i = 0;\n        utfx.encodeUTF16toUTF8(function() {\n            if (i >= str.length) return null;\n            return str.charCodeAt(i++);\n        }, function(b) {\n            out.push(b);\n        });\n        return out;\n    }\n    // A base64 implementation for the bcrypt algorithm. This is partly non-standard.\n    /**\r\n     * bcrypt's own non-standard base64 dictionary.\r\n     * @type {!Array.<string>}\r\n     * @const\r\n     * @inner\r\n     **/ var BASE64_CODE = \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".split(\"\");\n    /**\r\n     * @type {!Array.<number>}\r\n     * @const\r\n     * @inner\r\n     **/ var BASE64_INDEX = [\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        0,\n        1,\n        54,\n        55,\n        56,\n        57,\n        58,\n        59,\n        60,\n        61,\n        62,\n        63,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        20,\n        21,\n        22,\n        23,\n        24,\n        25,\n        26,\n        27,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        28,\n        29,\n        30,\n        31,\n        32,\n        33,\n        34,\n        35,\n        36,\n        37,\n        38,\n        39,\n        40,\n        41,\n        42,\n        43,\n        44,\n        45,\n        46,\n        47,\n        48,\n        49,\n        50,\n        51,\n        52,\n        53,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1\n    ];\n    /**\r\n     * @type {!function(...number):string}\r\n     * @inner\r\n     */ var stringFromCharCode = String.fromCharCode;\n    /**\r\n     * Encodes a byte array to base64 with up to len bytes of input.\r\n     * @param {!Array.<number>} b Byte array\r\n     * @param {number} len Maximum input length\r\n     * @returns {string}\r\n     * @inner\r\n     */ function base64_encode(b, len) {\n        var off = 0, rs = [], c1, c2;\n        if (len <= 0 || len > b.length) throw Error(\"Illegal len: \" + len);\n        while(off < len){\n            c1 = b[off++] & 0xff;\n            rs.push(BASE64_CODE[c1 >> 2 & 0x3f]);\n            c1 = (c1 & 0x03) << 4;\n            if (off >= len) {\n                rs.push(BASE64_CODE[c1 & 0x3f]);\n                break;\n            }\n            c2 = b[off++] & 0xff;\n            c1 |= c2 >> 4 & 0x0f;\n            rs.push(BASE64_CODE[c1 & 0x3f]);\n            c1 = (c2 & 0x0f) << 2;\n            if (off >= len) {\n                rs.push(BASE64_CODE[c1 & 0x3f]);\n                break;\n            }\n            c2 = b[off++] & 0xff;\n            c1 |= c2 >> 6 & 0x03;\n            rs.push(BASE64_CODE[c1 & 0x3f]);\n            rs.push(BASE64_CODE[c2 & 0x3f]);\n        }\n        return rs.join(\"\");\n    }\n    /**\r\n     * Decodes a base64 encoded string to up to len bytes of output.\r\n     * @param {string} s String to decode\r\n     * @param {number} len Maximum output length\r\n     * @returns {!Array.<number>}\r\n     * @inner\r\n     */ function base64_decode(s, len) {\n        var off = 0, slen = s.length, olen = 0, rs = [], c1, c2, c3, c4, o, code;\n        if (len <= 0) throw Error(\"Illegal len: \" + len);\n        while(off < slen - 1 && olen < len){\n            code = s.charCodeAt(off++);\n            c1 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            code = s.charCodeAt(off++);\n            c2 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            if (c1 == -1 || c2 == -1) break;\n            o = c1 << 2 >>> 0;\n            o |= (c2 & 0x30) >> 4;\n            rs.push(stringFromCharCode(o));\n            if (++olen >= len || off >= slen) break;\n            code = s.charCodeAt(off++);\n            c3 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            if (c3 == -1) break;\n            o = (c2 & 0x0f) << 4 >>> 0;\n            o |= (c3 & 0x3c) >> 2;\n            rs.push(stringFromCharCode(o));\n            if (++olen >= len || off >= slen) break;\n            code = s.charCodeAt(off++);\n            c4 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            o = (c3 & 0x03) << 6 >>> 0;\n            o |= c4;\n            rs.push(stringFromCharCode(o));\n            ++olen;\n        }\n        var res = [];\n        for(off = 0; off < olen; off++)res.push(rs[off].charCodeAt(0));\n        return res;\n    }\n    /**\r\n     * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>\r\n     * Released under the Apache License, Version 2.0\r\n     * see: https://github.com/dcodeIO/utfx for details\r\n     */ var utfx = function() {\n        \"use strict\";\n        /**\r\n         * utfx namespace.\r\n         * @inner\r\n         * @type {!Object.<string,*>}\r\n         */ var utfx = {};\n        /**\r\n         * Maximum valid code point.\r\n         * @type {number}\r\n         * @const\r\n         */ utfx.MAX_CODEPOINT = 0x10FFFF;\n        /**\r\n         * Encodes UTF8 code points to UTF8 bytes.\r\n         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\r\n         *  respectively `null` if there are no more code points left or a single numeric code point.\r\n         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte\r\n         */ utfx.encodeUTF8 = function(src, dst) {\n            var cp = null;\n            if (typeof src === \"number\") cp = src, src = function() {\n                return null;\n            };\n            while(cp !== null || (cp = src()) !== null){\n                if (cp < 0x80) dst(cp & 0x7F);\n                else if (cp < 0x800) dst(cp >> 6 & 0x1F | 0xC0), dst(cp & 0x3F | 0x80);\n                else if (cp < 0x10000) dst(cp >> 12 & 0x0F | 0xE0), dst(cp >> 6 & 0x3F | 0x80), dst(cp & 0x3F | 0x80);\n                else dst(cp >> 18 & 0x07 | 0xF0), dst(cp >> 12 & 0x3F | 0x80), dst(cp >> 6 & 0x3F | 0x80), dst(cp & 0x3F | 0x80);\n                cp = null;\n            }\n        };\n        /**\r\n         * Decodes UTF8 bytes to UTF8 code points.\r\n         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\r\n         *  are no more bytes left.\r\n         * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.\r\n         * @throws {RangeError} If a starting byte is invalid in UTF8\r\n         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the\r\n         *  remaining bytes.\r\n         */ utfx.decodeUTF8 = function(src, dst) {\n            var a, b, c, d, fail = function(b) {\n                b = b.slice(0, b.indexOf(null));\n                var err = Error(b.toString());\n                err.name = \"TruncatedError\";\n                err[\"bytes\"] = b;\n                throw err;\n            };\n            while((a = src()) !== null){\n                if ((a & 0x80) === 0) dst(a);\n                else if ((a & 0xE0) === 0xC0) (b = src()) === null && fail([\n                    a,\n                    b\n                ]), dst((a & 0x1F) << 6 | b & 0x3F);\n                else if ((a & 0xF0) === 0xE0) ((b = src()) === null || (c = src()) === null) && fail([\n                    a,\n                    b,\n                    c\n                ]), dst((a & 0x0F) << 12 | (b & 0x3F) << 6 | c & 0x3F);\n                else if ((a & 0xF8) === 0xF0) ((b = src()) === null || (c = src()) === null || (d = src()) === null) && fail([\n                    a,\n                    b,\n                    c,\n                    d\n                ]), dst((a & 0x07) << 18 | (b & 0x3F) << 12 | (c & 0x3F) << 6 | d & 0x3F);\n                else throw RangeError(\"Illegal starting byte: \" + a);\n            }\n        };\n        /**\r\n         * Converts UTF16 characters to UTF8 code points.\r\n         * @param {!function():number|null} src Characters source as a function returning the next char code respectively\r\n         *  `null` if there are no more characters left.\r\n         * @param {!function(number)} dst Code points destination as a function successively called with each converted code\r\n         *  point.\r\n         */ utfx.UTF16toUTF8 = function(src, dst) {\n            var c1, c2 = null;\n            while(true){\n                if ((c1 = c2 !== null ? c2 : src()) === null) break;\n                if (c1 >= 0xD800 && c1 <= 0xDFFF) {\n                    if ((c2 = src()) !== null) {\n                        if (c2 >= 0xDC00 && c2 <= 0xDFFF) {\n                            dst((c1 - 0xD800) * 0x400 + c2 - 0xDC00 + 0x10000);\n                            c2 = null;\n                            continue;\n                        }\n                    }\n                }\n                dst(c1);\n            }\n            if (c2 !== null) dst(c2);\n        };\n        /**\r\n         * Converts UTF8 code points to UTF16 characters.\r\n         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\r\n         *  respectively `null` if there are no more code points left or a single numeric code point.\r\n         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\r\n         * @throws {RangeError} If a code point is out of range\r\n         */ utfx.UTF8toUTF16 = function(src, dst) {\n            var cp = null;\n            if (typeof src === \"number\") cp = src, src = function() {\n                return null;\n            };\n            while(cp !== null || (cp = src()) !== null){\n                if (cp <= 0xFFFF) dst(cp);\n                else cp -= 0x10000, dst((cp >> 10) + 0xD800), dst(cp % 0x400 + 0xDC00);\n                cp = null;\n            }\n        };\n        /**\r\n         * Converts and encodes UTF16 characters to UTF8 bytes.\r\n         * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`\r\n         *  if there are no more characters left.\r\n         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.\r\n         */ utfx.encodeUTF16toUTF8 = function(src, dst) {\n            utfx.UTF16toUTF8(src, function(cp) {\n                utfx.encodeUTF8(cp, dst);\n            });\n        };\n        /**\r\n         * Decodes and converts UTF8 bytes to UTF16 characters.\r\n         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\r\n         *  are no more bytes left.\r\n         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\r\n         * @throws {RangeError} If a starting byte is invalid in UTF8\r\n         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.\r\n         */ utfx.decodeUTF8toUTF16 = function(src, dst) {\n            utfx.decodeUTF8(src, function(cp) {\n                utfx.UTF8toUTF16(cp, dst);\n            });\n        };\n        /**\r\n         * Calculates the byte length of an UTF8 code point.\r\n         * @param {number} cp UTF8 code point\r\n         * @returns {number} Byte length\r\n         */ utfx.calculateCodePoint = function(cp) {\n            return cp < 0x80 ? 1 : cp < 0x800 ? 2 : cp < 0x10000 ? 3 : 4;\n        };\n        /**\r\n         * Calculates the number of UTF8 bytes required to store UTF8 code points.\r\n         * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively\r\n         *  `null` if there are no more code points left.\r\n         * @returns {number} The number of UTF8 bytes required\r\n         */ utfx.calculateUTF8 = function(src) {\n            var cp, l = 0;\n            while((cp = src()) !== null)l += utfx.calculateCodePoint(cp);\n            return l;\n        };\n        /**\r\n         * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.\r\n         * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively\r\n         *  `null` if there are no more characters left.\r\n         * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.\r\n         */ utfx.calculateUTF16asUTF8 = function(src) {\n            var n = 0, l = 0;\n            utfx.UTF16toUTF8(src, function(cp) {\n                ++n;\n                l += utfx.calculateCodePoint(cp);\n            });\n            return [\n                n,\n                l\n            ];\n        };\n        return utfx;\n    }();\n    Date.now = Date.now || function() {\n        return +new Date;\n    };\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */ var BCRYPT_SALT_LEN = 16;\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */ var GENSALT_DEFAULT_LOG2_ROUNDS = 10;\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */ var BLOWFISH_NUM_ROUNDS = 16;\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */ var MAX_EXECUTION_TIME = 100;\n    /**\r\n     * @type {Array.<number>}\r\n     * @const\r\n     * @inner\r\n     */ var P_ORIG = [\n        0x243f6a88,\n        0x85a308d3,\n        0x13198a2e,\n        0x03707344,\n        0xa4093822,\n        0x299f31d0,\n        0x082efa98,\n        0xec4e6c89,\n        0x452821e6,\n        0x38d01377,\n        0xbe5466cf,\n        0x34e90c6c,\n        0xc0ac29b7,\n        0xc97c50dd,\n        0x3f84d5b5,\n        0xb5470917,\n        0x9216d5d9,\n        0x8979fb1b\n    ];\n    /**\r\n     * @type {Array.<number>}\r\n     * @const\r\n     * @inner\r\n     */ var S_ORIG = [\n        0xd1310ba6,\n        0x98dfb5ac,\n        0x2ffd72db,\n        0xd01adfb7,\n        0xb8e1afed,\n        0x6a267e96,\n        0xba7c9045,\n        0xf12c7f99,\n        0x24a19947,\n        0xb3916cf7,\n        0x0801f2e2,\n        0x858efc16,\n        0x636920d8,\n        0x71574e69,\n        0xa458fea3,\n        0xf4933d7e,\n        0x0d95748f,\n        0x728eb658,\n        0x718bcd58,\n        0x82154aee,\n        0x7b54a41d,\n        0xc25a59b5,\n        0x9c30d539,\n        0x2af26013,\n        0xc5d1b023,\n        0x286085f0,\n        0xca417918,\n        0xb8db38ef,\n        0x8e79dcb0,\n        0x603a180e,\n        0x6c9e0e8b,\n        0xb01e8a3e,\n        0xd71577c1,\n        0xbd314b27,\n        0x78af2fda,\n        0x55605c60,\n        0xe65525f3,\n        0xaa55ab94,\n        0x57489862,\n        0x63e81440,\n        0x55ca396a,\n        0x2aab10b6,\n        0xb4cc5c34,\n        0x1141e8ce,\n        0xa15486af,\n        0x7c72e993,\n        0xb3ee1411,\n        0x636fbc2a,\n        0x2ba9c55d,\n        0x741831f6,\n        0xce5c3e16,\n        0x9b87931e,\n        0xafd6ba33,\n        0x6c24cf5c,\n        0x7a325381,\n        0x28958677,\n        0x3b8f4898,\n        0x6b4bb9af,\n        0xc4bfe81b,\n        0x66282193,\n        0x61d809cc,\n        0xfb21a991,\n        0x487cac60,\n        0x5dec8032,\n        0xef845d5d,\n        0xe98575b1,\n        0xdc262302,\n        0xeb651b88,\n        0x23893e81,\n        0xd396acc5,\n        0x0f6d6ff3,\n        0x83f44239,\n        0x2e0b4482,\n        0xa4842004,\n        0x69c8f04a,\n        0x9e1f9b5e,\n        0x21c66842,\n        0xf6e96c9a,\n        0x670c9c61,\n        0xabd388f0,\n        0x6a51a0d2,\n        0xd8542f68,\n        0x960fa728,\n        0xab5133a3,\n        0x6eef0b6c,\n        0x137a3be4,\n        0xba3bf050,\n        0x7efb2a98,\n        0xa1f1651d,\n        0x39af0176,\n        0x66ca593e,\n        0x82430e88,\n        0x8cee8619,\n        0x456f9fb4,\n        0x7d84a5c3,\n        0x3b8b5ebe,\n        0xe06f75d8,\n        0x85c12073,\n        0x401a449f,\n        0x56c16aa6,\n        0x4ed3aa62,\n        0x363f7706,\n        0x1bfedf72,\n        0x429b023d,\n        0x37d0d724,\n        0xd00a1248,\n        0xdb0fead3,\n        0x49f1c09b,\n        0x075372c9,\n        0x80991b7b,\n        0x25d479d8,\n        0xf6e8def7,\n        0xe3fe501a,\n        0xb6794c3b,\n        0x976ce0bd,\n        0x04c006ba,\n        0xc1a94fb6,\n        0x409f60c4,\n        0x5e5c9ec2,\n        0x196a2463,\n        0x68fb6faf,\n        0x3e6c53b5,\n        0x1339b2eb,\n        0x3b52ec6f,\n        0x6dfc511f,\n        0x9b30952c,\n        0xcc814544,\n        0xaf5ebd09,\n        0xbee3d004,\n        0xde334afd,\n        0x660f2807,\n        0x192e4bb3,\n        0xc0cba857,\n        0x45c8740f,\n        0xd20b5f39,\n        0xb9d3fbdb,\n        0x5579c0bd,\n        0x1a60320a,\n        0xd6a100c6,\n        0x402c7279,\n        0x679f25fe,\n        0xfb1fa3cc,\n        0x8ea5e9f8,\n        0xdb3222f8,\n        0x3c7516df,\n        0xfd616b15,\n        0x2f501ec8,\n        0xad0552ab,\n        0x323db5fa,\n        0xfd238760,\n        0x53317b48,\n        0x3e00df82,\n        0x9e5c57bb,\n        0xca6f8ca0,\n        0x1a87562e,\n        0xdf1769db,\n        0xd542a8f6,\n        0x287effc3,\n        0xac6732c6,\n        0x8c4f5573,\n        0x695b27b0,\n        0xbbca58c8,\n        0xe1ffa35d,\n        0xb8f011a0,\n        0x10fa3d98,\n        0xfd2183b8,\n        0x4afcb56c,\n        0x2dd1d35b,\n        0x9a53e479,\n        0xb6f84565,\n        0xd28e49bc,\n        0x4bfb9790,\n        0xe1ddf2da,\n        0xa4cb7e33,\n        0x62fb1341,\n        0xcee4c6e8,\n        0xef20cada,\n        0x36774c01,\n        0xd07e9efe,\n        0x2bf11fb4,\n        0x95dbda4d,\n        0xae909198,\n        0xeaad8e71,\n        0x6b93d5a0,\n        0xd08ed1d0,\n        0xafc725e0,\n        0x8e3c5b2f,\n        0x8e7594b7,\n        0x8ff6e2fb,\n        0xf2122b64,\n        0x8888b812,\n        0x900df01c,\n        0x4fad5ea0,\n        0x688fc31c,\n        0xd1cff191,\n        0xb3a8c1ad,\n        0x2f2f2218,\n        0xbe0e1777,\n        0xea752dfe,\n        0x8b021fa1,\n        0xe5a0cc0f,\n        0xb56f74e8,\n        0x18acf3d6,\n        0xce89e299,\n        0xb4a84fe0,\n        0xfd13e0b7,\n        0x7cc43b81,\n        0xd2ada8d9,\n        0x165fa266,\n        0x80957705,\n        0x93cc7314,\n        0x211a1477,\n        0xe6ad2065,\n        0x77b5fa86,\n        0xc75442f5,\n        0xfb9d35cf,\n        0xebcdaf0c,\n        0x7b3e89a0,\n        0xd6411bd3,\n        0xae1e7e49,\n        0x00250e2d,\n        0x2071b35e,\n        0x226800bb,\n        0x57b8e0af,\n        0x2464369b,\n        0xf009b91e,\n        0x5563911d,\n        0x59dfa6aa,\n        0x78c14389,\n        0xd95a537f,\n        0x207d5ba2,\n        0x02e5b9c5,\n        0x83260376,\n        0x6295cfa9,\n        0x11c81968,\n        0x4e734a41,\n        0xb3472dca,\n        0x7b14a94a,\n        0x1b510052,\n        0x9a532915,\n        0xd60f573f,\n        0xbc9bc6e4,\n        0x2b60a476,\n        0x81e67400,\n        0x08ba6fb5,\n        0x571be91f,\n        0xf296ec6b,\n        0x2a0dd915,\n        0xb6636521,\n        0xe7b9f9b6,\n        0xff34052e,\n        0xc5855664,\n        0x53b02d5d,\n        0xa99f8fa1,\n        0x08ba4799,\n        0x6e85076a,\n        0x4b7a70e9,\n        0xb5b32944,\n        0xdb75092e,\n        0xc4192623,\n        0xad6ea6b0,\n        0x49a7df7d,\n        0x9cee60b8,\n        0x8fedb266,\n        0xecaa8c71,\n        0x699a17ff,\n        0x5664526c,\n        0xc2b19ee1,\n        0x193602a5,\n        0x75094c29,\n        0xa0591340,\n        0xe4183a3e,\n        0x3f54989a,\n        0x5b429d65,\n        0x6b8fe4d6,\n        0x99f73fd6,\n        0xa1d29c07,\n        0xefe830f5,\n        0x4d2d38e6,\n        0xf0255dc1,\n        0x4cdd2086,\n        0x8470eb26,\n        0x6382e9c6,\n        0x021ecc5e,\n        0x09686b3f,\n        0x3ebaefc9,\n        0x3c971814,\n        0x6b6a70a1,\n        0x687f3584,\n        0x52a0e286,\n        0xb79c5305,\n        0xaa500737,\n        0x3e07841c,\n        0x7fdeae5c,\n        0x8e7d44ec,\n        0x5716f2b8,\n        0xb03ada37,\n        0xf0500c0d,\n        0xf01c1f04,\n        0x0200b3ff,\n        0xae0cf51a,\n        0x3cb574b2,\n        0x25837a58,\n        0xdc0921bd,\n        0xd19113f9,\n        0x7ca92ff6,\n        0x94324773,\n        0x22f54701,\n        0x3ae5e581,\n        0x37c2dadc,\n        0xc8b57634,\n        0x9af3dda7,\n        0xa9446146,\n        0x0fd0030e,\n        0xecc8c73e,\n        0xa4751e41,\n        0xe238cd99,\n        0x3bea0e2f,\n        0x3280bba1,\n        0x183eb331,\n        0x4e548b38,\n        0x4f6db908,\n        0x6f420d03,\n        0xf60a04bf,\n        0x2cb81290,\n        0x24977c79,\n        0x5679b072,\n        0xbcaf89af,\n        0xde9a771f,\n        0xd9930810,\n        0xb38bae12,\n        0xdccf3f2e,\n        0x5512721f,\n        0x2e6b7124,\n        0x501adde6,\n        0x9f84cd87,\n        0x7a584718,\n        0x7408da17,\n        0xbc9f9abc,\n        0xe94b7d8c,\n        0xec7aec3a,\n        0xdb851dfa,\n        0x63094366,\n        0xc464c3d2,\n        0xef1c1847,\n        0x3215d908,\n        0xdd433b37,\n        0x24c2ba16,\n        0x12a14d43,\n        0x2a65c451,\n        0x50940002,\n        0x133ae4dd,\n        0x71dff89e,\n        0x10314e55,\n        0x81ac77d6,\n        0x5f11199b,\n        0x043556f1,\n        0xd7a3c76b,\n        0x3c11183b,\n        0x5924a509,\n        0xf28fe6ed,\n        0x97f1fbfa,\n        0x9ebabf2c,\n        0x1e153c6e,\n        0x86e34570,\n        0xeae96fb1,\n        0x860e5e0a,\n        0x5a3e2ab3,\n        0x771fe71c,\n        0x4e3d06fa,\n        0x2965dcb9,\n        0x99e71d0f,\n        0x803e89d6,\n        0x5266c825,\n        0x2e4cc978,\n        0x9c10b36a,\n        0xc6150eba,\n        0x94e2ea78,\n        0xa5fc3c53,\n        0x1e0a2df4,\n        0xf2f74ea7,\n        0x361d2b3d,\n        0x1939260f,\n        0x19c27960,\n        0x5223a708,\n        0xf71312b6,\n        0xebadfe6e,\n        0xeac31f66,\n        0xe3bc4595,\n        0xa67bc883,\n        0xb17f37d1,\n        0x018cff28,\n        0xc332ddef,\n        0xbe6c5aa5,\n        0x65582185,\n        0x68ab9802,\n        0xeecea50f,\n        0xdb2f953b,\n        0x2aef7dad,\n        0x5b6e2f84,\n        0x1521b628,\n        0x29076170,\n        0xecdd4775,\n        0x619f1510,\n        0x13cca830,\n        0xeb61bd96,\n        0x0334fe1e,\n        0xaa0363cf,\n        0xb5735c90,\n        0x4c70a239,\n        0xd59e9e0b,\n        0xcbaade14,\n        0xeecc86bc,\n        0x60622ca7,\n        0x9cab5cab,\n        0xb2f3846e,\n        0x648b1eaf,\n        0x19bdf0ca,\n        0xa02369b9,\n        0x655abb50,\n        0x40685a32,\n        0x3c2ab4b3,\n        0x319ee9d5,\n        0xc021b8f7,\n        0x9b540b19,\n        0x875fa099,\n        0x95f7997e,\n        0x623d7da8,\n        0xf837889a,\n        0x97e32d77,\n        0x11ed935f,\n        0x16681281,\n        0x0e358829,\n        0xc7e61fd6,\n        0x96dedfa1,\n        0x7858ba99,\n        0x57f584a5,\n        0x1b227263,\n        0x9b83c3ff,\n        0x1ac24696,\n        0xcdb30aeb,\n        0x532e3054,\n        0x8fd948e4,\n        0x6dbc3128,\n        0x58ebf2ef,\n        0x34c6ffea,\n        0xfe28ed61,\n        0xee7c3c73,\n        0x5d4a14d9,\n        0xe864b7e3,\n        0x42105d14,\n        0x203e13e0,\n        0x45eee2b6,\n        0xa3aaabea,\n        0xdb6c4f15,\n        0xfacb4fd0,\n        0xc742f442,\n        0xef6abbb5,\n        0x654f3b1d,\n        0x41cd2105,\n        0xd81e799e,\n        0x86854dc7,\n        0xe44b476a,\n        0x3d816250,\n        0xcf62a1f2,\n        0x5b8d2646,\n        0xfc8883a0,\n        0xc1c7b6a3,\n        0x7f1524c3,\n        0x69cb7492,\n        0x47848a0b,\n        0x5692b285,\n        0x095bbf00,\n        0xad19489d,\n        0x1462b174,\n        0x23820e00,\n        0x58428d2a,\n        0x0c55f5ea,\n        0x1dadf43e,\n        0x233f7061,\n        0x3372f092,\n        0x8d937e41,\n        0xd65fecf1,\n        0x6c223bdb,\n        0x7cde3759,\n        0xcbee7460,\n        0x4085f2a7,\n        0xce77326e,\n        0xa6078084,\n        0x19f8509e,\n        0xe8efd855,\n        0x61d99735,\n        0xa969a7aa,\n        0xc50c06c2,\n        0x5a04abfc,\n        0x800bcadc,\n        0x9e447a2e,\n        0xc3453484,\n        0xfdd56705,\n        0x0e1e9ec9,\n        0xdb73dbd3,\n        0x105588cd,\n        0x675fda79,\n        0xe3674340,\n        0xc5c43465,\n        0x713e38d8,\n        0x3d28f89e,\n        0xf16dff20,\n        0x153e21e7,\n        0x8fb03d4a,\n        0xe6e39f2b,\n        0xdb83adf7,\n        0xe93d5a68,\n        0x948140f7,\n        0xf64c261c,\n        0x94692934,\n        0x411520f7,\n        0x7602d4f7,\n        0xbcf46b2e,\n        0xd4a20068,\n        0xd4082471,\n        0x3320f46a,\n        0x43b7d4b7,\n        0x500061af,\n        0x1e39f62e,\n        0x97244546,\n        0x14214f74,\n        0xbf8b8840,\n        0x4d95fc1d,\n        0x96b591af,\n        0x70f4ddd3,\n        0x66a02f45,\n        0xbfbc09ec,\n        0x03bd9785,\n        0x7fac6dd0,\n        0x31cb8504,\n        0x96eb27b3,\n        0x55fd3941,\n        0xda2547e6,\n        0xabca0a9a,\n        0x28507825,\n        0x530429f4,\n        0x0a2c86da,\n        0xe9b66dfb,\n        0x68dc1462,\n        0xd7486900,\n        0x680ec0a4,\n        0x27a18dee,\n        0x4f3ffea2,\n        0xe887ad8c,\n        0xb58ce006,\n        0x7af4d6b6,\n        0xaace1e7c,\n        0xd3375fec,\n        0xce78a399,\n        0x406b2a42,\n        0x20fe9e35,\n        0xd9f385b9,\n        0xee39d7ab,\n        0x3b124e8b,\n        0x1dc9faf7,\n        0x4b6d1856,\n        0x26a36631,\n        0xeae397b2,\n        0x3a6efa74,\n        0xdd5b4332,\n        0x6841e7f7,\n        0xca7820fb,\n        0xfb0af54e,\n        0xd8feb397,\n        0x454056ac,\n        0xba489527,\n        0x55533a3a,\n        0x20838d87,\n        0xfe6ba9b7,\n        0xd096954b,\n        0x55a867bc,\n        0xa1159a58,\n        0xcca92963,\n        0x99e1db33,\n        0xa62a4a56,\n        0x3f3125f9,\n        0x5ef47e1c,\n        0x9029317c,\n        0xfdf8e802,\n        0x04272f70,\n        0x80bb155c,\n        0x05282ce3,\n        0x95c11548,\n        0xe4c66d22,\n        0x48c1133f,\n        0xc70f86dc,\n        0x07f9c9ee,\n        0x41041f0f,\n        0x404779a4,\n        0x5d886e17,\n        0x325f51eb,\n        0xd59bc0d1,\n        0xf2bcc18f,\n        0x41113564,\n        0x257b7834,\n        0x602a9c60,\n        0xdff8e8a3,\n        0x1f636c1b,\n        0x0e12b4c2,\n        0x02e1329e,\n        0xaf664fd1,\n        0xcad18115,\n        0x6b2395e0,\n        0x333e92e1,\n        0x3b240b62,\n        0xeebeb922,\n        0x85b2a20e,\n        0xe6ba0d99,\n        0xde720c8c,\n        0x2da2f728,\n        0xd0127845,\n        0x95b794fd,\n        0x647d0862,\n        0xe7ccf5f0,\n        0x5449a36f,\n        0x877d48fa,\n        0xc39dfd27,\n        0xf33e8d1e,\n        0x0a476341,\n        0x992eff74,\n        0x3a6f6eab,\n        0xf4f8fd37,\n        0xa812dc60,\n        0xa1ebddf8,\n        0x991be14c,\n        0xdb6e6b0d,\n        0xc67b5510,\n        0x6d672c37,\n        0x2765d43b,\n        0xdcd0e804,\n        0xf1290dc7,\n        0xcc00ffa3,\n        0xb5390f92,\n        0x690fed0b,\n        0x667b9ffb,\n        0xcedb7d9c,\n        0xa091cf0b,\n        0xd9155ea3,\n        0xbb132f88,\n        0x515bad24,\n        0x7b9479bf,\n        0x763bd6eb,\n        0x37392eb3,\n        0xcc115979,\n        0x8026e297,\n        0xf42e312d,\n        0x6842ada7,\n        0xc66a2b3b,\n        0x12754ccc,\n        0x782ef11c,\n        0x6a124237,\n        0xb79251e7,\n        0x06a1bbe6,\n        0x4bfb6350,\n        0x1a6b1018,\n        0x11caedfa,\n        0x3d25bdd8,\n        0xe2e1c3c9,\n        0x44421659,\n        0x0a121386,\n        0xd90cec6e,\n        0xd5abea2a,\n        0x64af674e,\n        0xda86a85f,\n        0xbebfe988,\n        0x64e4c3fe,\n        0x9dbc8057,\n        0xf0f7c086,\n        0x60787bf8,\n        0x6003604d,\n        0xd1fd8346,\n        0xf6381fb0,\n        0x7745ae04,\n        0xd736fccc,\n        0x83426b33,\n        0xf01eab71,\n        0xb0804187,\n        0x3c005e5f,\n        0x77a057be,\n        0xbde8ae24,\n        0x55464299,\n        0xbf582e61,\n        0x4e58f48f,\n        0xf2ddfda2,\n        0xf474ef38,\n        0x8789bdc2,\n        0x5366f9c3,\n        0xc8b38e74,\n        0xb475f255,\n        0x46fcd9b9,\n        0x7aeb2661,\n        0x8b1ddf84,\n        0x846a0e79,\n        0x915f95e2,\n        0x466e598e,\n        0x20b45770,\n        0x8cd55591,\n        0xc902de4c,\n        0xb90bace1,\n        0xbb8205d0,\n        0x11a86248,\n        0x7574a99e,\n        0xb77f19b6,\n        0xe0a9dc09,\n        0x662d09a1,\n        0xc4324633,\n        0xe85a1f02,\n        0x09f0be8c,\n        0x4a99a025,\n        0x1d6efe10,\n        0x1ab93d1d,\n        0x0ba5a4df,\n        0xa186f20f,\n        0x2868f169,\n        0xdcb7da83,\n        0x573906fe,\n        0xa1e2ce9b,\n        0x4fcd7f52,\n        0x50115e01,\n        0xa70683fa,\n        0xa002b5c4,\n        0x0de6d027,\n        0x9af88c27,\n        0x773f8641,\n        0xc3604c06,\n        0x61a806b5,\n        0xf0177a28,\n        0xc0f586e0,\n        0x006058aa,\n        0x30dc7d62,\n        0x11e69ed7,\n        0x2338ea63,\n        0x53c2dd94,\n        0xc2c21634,\n        0xbbcbee56,\n        0x90bcb6de,\n        0xebfc7da1,\n        0xce591d76,\n        0x6f05e409,\n        0x4b7c0188,\n        0x39720a3d,\n        0x7c927c24,\n        0x86e3725f,\n        0x724d9db9,\n        0x1ac15bb4,\n        0xd39eb8fc,\n        0xed545578,\n        0x08fca5b5,\n        0xd83d7cd3,\n        0x4dad0fc4,\n        0x1e50ef5e,\n        0xb161e6f8,\n        0xa28514d9,\n        0x6c51133c,\n        0x6fd5c7e7,\n        0x56e14ec4,\n        0x362abfce,\n        0xddc6c837,\n        0xd79a3234,\n        0x92638212,\n        0x670efa8e,\n        0x406000e0,\n        0x3a39ce37,\n        0xd3faf5cf,\n        0xabc27737,\n        0x5ac52d1b,\n        0x5cb0679e,\n        0x4fa33742,\n        0xd3822740,\n        0x99bc9bbe,\n        0xd5118e9d,\n        0xbf0f7315,\n        0xd62d1c7e,\n        0xc700c47b,\n        0xb78c1b6b,\n        0x21a19045,\n        0xb26eb1be,\n        0x6a366eb4,\n        0x5748ab2f,\n        0xbc946e79,\n        0xc6a376d2,\n        0x6549c2c8,\n        0x530ff8ee,\n        0x468dde7d,\n        0xd5730a1d,\n        0x4cd04dc6,\n        0x2939bbdb,\n        0xa9ba4650,\n        0xac9526e8,\n        0xbe5ee304,\n        0xa1fad5f0,\n        0x6a2d519a,\n        0x63ef8ce2,\n        0x9a86ee22,\n        0xc089c2b8,\n        0x43242ef6,\n        0xa51e03aa,\n        0x9cf2d0a4,\n        0x83c061ba,\n        0x9be96a4d,\n        0x8fe51550,\n        0xba645bd6,\n        0x2826a2f9,\n        0xa73a3ae1,\n        0x4ba99586,\n        0xef5562e9,\n        0xc72fefd3,\n        0xf752f7da,\n        0x3f046f69,\n        0x77fa0a59,\n        0x80e4a915,\n        0x87b08601,\n        0x9b09e6ad,\n        0x3b3ee593,\n        0xe990fd5a,\n        0x9e34d797,\n        0x2cf0b7d9,\n        0x022b8b51,\n        0x96d5ac3a,\n        0x017da67d,\n        0xd1cf3ed6,\n        0x7c7d2d28,\n        0x1f9f25cf,\n        0xadf2b89b,\n        0x5ad6b472,\n        0x5a88f54c,\n        0xe029ac71,\n        0xe019a5e6,\n        0x47b0acfd,\n        0xed93fa9b,\n        0xe8d3c48d,\n        0x283b57cc,\n        0xf8d56629,\n        0x79132e28,\n        0x785f0191,\n        0xed756055,\n        0xf7960e44,\n        0xe3d35e8c,\n        0x15056dd4,\n        0x88f46dba,\n        0x03a16125,\n        0x0564f0bd,\n        0xc3eb9e15,\n        0x3c9057a2,\n        0x97271aec,\n        0xa93a072a,\n        0x1b3f6d9b,\n        0x1e6321f5,\n        0xf59c66fb,\n        0x26dcf319,\n        0x7533d928,\n        0xb155fdf5,\n        0x03563482,\n        0x8aba3cbb,\n        0x28517711,\n        0xc20ad9f8,\n        0xabcc5167,\n        0xccad925f,\n        0x4de81751,\n        0x3830dc8e,\n        0x379d5862,\n        0x9320f991,\n        0xea7a90c2,\n        0xfb3e7bce,\n        0x5121ce64,\n        0x774fbe32,\n        0xa8b6e37e,\n        0xc3293d46,\n        0x48de5369,\n        0x6413e680,\n        0xa2ae0810,\n        0xdd6db224,\n        0x69852dfd,\n        0x09072166,\n        0xb39a460a,\n        0x6445c0dd,\n        0x586cdecf,\n        0x1c20c8ae,\n        0x5bbef7dd,\n        0x1b588d40,\n        0xccd2017f,\n        0x6bb4e3bb,\n        0xdda26a7e,\n        0x3a59ff45,\n        0x3e350a44,\n        0xbcb4cdd5,\n        0x72eacea8,\n        0xfa6484bb,\n        0x8d6612ae,\n        0xbf3c6f47,\n        0xd29be463,\n        0x542f5d9e,\n        0xaec2771b,\n        0xf64e6370,\n        0x740e0d8d,\n        0xe75b1357,\n        0xf8721671,\n        0xaf537d5d,\n        0x4040cb08,\n        0x4eb4e2cc,\n        0x34d2466a,\n        0x0115af84,\n        0xe1b00428,\n        0x95983a1d,\n        0x06b89fb4,\n        0xce6ea048,\n        0x6f3f3b82,\n        0x3520ab82,\n        0x011a1d4b,\n        0x277227f8,\n        0x611560b1,\n        0xe7933fdc,\n        0xbb3a792b,\n        0x344525bd,\n        0xa08839e1,\n        0x51ce794b,\n        0x2f32c9b7,\n        0xa01fbac9,\n        0xe01cc87e,\n        0xbcc7d1f6,\n        0xcf0111c3,\n        0xa1e8aac7,\n        0x1a908749,\n        0xd44fbd9a,\n        0xd0dadecb,\n        0xd50ada38,\n        0x0339c32a,\n        0xc6913667,\n        0x8df9317c,\n        0xe0b12b4f,\n        0xf79e59b7,\n        0x43f5bb3a,\n        0xf2d519ff,\n        0x27d9459c,\n        0xbf97222c,\n        0x15e6fc2a,\n        0x0f91fc71,\n        0x9b941525,\n        0xfae59361,\n        0xceb69ceb,\n        0xc2a86459,\n        0x12baa8d1,\n        0xb6c1075e,\n        0xe3056a0c,\n        0x10d25065,\n        0xcb03a442,\n        0xe0ec6e0e,\n        0x1698db3b,\n        0x4c98a0be,\n        0x3278e964,\n        0x9f1f9532,\n        0xe0d392df,\n        0xd3a0342b,\n        0x8971f21e,\n        0x1b0a7441,\n        0x4ba3348c,\n        0xc5be7120,\n        0xc37632d8,\n        0xdf359f8d,\n        0x9b992f2e,\n        0xe60b6f47,\n        0x0fe3f11d,\n        0xe54cda54,\n        0x1edad891,\n        0xce6279cf,\n        0xcd3e7e6f,\n        0x1618b166,\n        0xfd2c1d05,\n        0x848fd2c5,\n        0xf6fb2299,\n        0xf523f357,\n        0xa6327623,\n        0x93a83531,\n        0x56cccd02,\n        0xacf08162,\n        0x5a75ebb5,\n        0x6e163697,\n        0x88d273cc,\n        0xde966292,\n        0x81b949d0,\n        0x4c50901b,\n        0x71c65614,\n        0xe6c6c7bd,\n        0x327a140a,\n        0x45e1d006,\n        0xc3f27b9a,\n        0xc9aa53fd,\n        0x62a80f00,\n        0xbb25bfe2,\n        0x35bdd2f6,\n        0x71126905,\n        0xb2040222,\n        0xb6cbcf7c,\n        0xcd769c2b,\n        0x53113ec0,\n        0x1640e3d3,\n        0x38abbd60,\n        0x2547adf0,\n        0xba38209c,\n        0xf746ce76,\n        0x77afa1c5,\n        0x20756060,\n        0x85cbfe4e,\n        0x8ae88dd8,\n        0x7aaaf9b0,\n        0x4cf9aa7e,\n        0x1948c25c,\n        0x02fb8a8c,\n        0x01c36ae4,\n        0xd6ebe1f9,\n        0x90d4f869,\n        0xa65cdea0,\n        0x3f09252d,\n        0xc208e69f,\n        0xb74e6132,\n        0xce77e25b,\n        0x578fdfe3,\n        0x3ac372e6\n    ];\n    /**\r\n     * @type {Array.<number>}\r\n     * @const\r\n     * @inner\r\n     */ var C_ORIG = [\n        0x4f727068,\n        0x65616e42,\n        0x65686f6c,\n        0x64657253,\n        0x63727944,\n        0x6f756274\n    ];\n    /**\r\n     * @param {Array.<number>} lr\r\n     * @param {number} off\r\n     * @param {Array.<number>} P\r\n     * @param {Array.<number>} S\r\n     * @returns {Array.<number>}\r\n     * @inner\r\n     */ function _encipher(lr, off, P, S) {\n        var n, l = lr[off], r = lr[off + 1];\n        l ^= P[0];\n        /*\r\n        for (var i=0, k=BLOWFISH_NUM_ROUNDS-2; i<=k;)\r\n            // Feistel substitution on left word\r\n            n  = S[l >>> 24],\r\n            n += S[0x100 | ((l >> 16) & 0xff)],\r\n            n ^= S[0x200 | ((l >> 8) & 0xff)],\r\n            n += S[0x300 | (l & 0xff)],\r\n            r ^= n ^ P[++i],\r\n            // Feistel substitution on right word\r\n            n  = S[r >>> 24],\r\n            n += S[0x100 | ((r >> 16) & 0xff)],\r\n            n ^= S[0x200 | ((r >> 8) & 0xff)],\r\n            n += S[0x300 | (r & 0xff)],\r\n            l ^= n ^ P[++i];\r\n        */ //The following is an unrolled version of the above loop.\n        //Iteration 0\n        n = S[l >>> 24];\n        n += S[0x100 | l >> 16 & 0xff];\n        n ^= S[0x200 | l >> 8 & 0xff];\n        n += S[0x300 | l & 0xff];\n        r ^= n ^ P[1];\n        n = S[r >>> 24];\n        n += S[0x100 | r >> 16 & 0xff];\n        n ^= S[0x200 | r >> 8 & 0xff];\n        n += S[0x300 | r & 0xff];\n        l ^= n ^ P[2];\n        //Iteration 1\n        n = S[l >>> 24];\n        n += S[0x100 | l >> 16 & 0xff];\n        n ^= S[0x200 | l >> 8 & 0xff];\n        n += S[0x300 | l & 0xff];\n        r ^= n ^ P[3];\n        n = S[r >>> 24];\n        n += S[0x100 | r >> 16 & 0xff];\n        n ^= S[0x200 | r >> 8 & 0xff];\n        n += S[0x300 | r & 0xff];\n        l ^= n ^ P[4];\n        //Iteration 2\n        n = S[l >>> 24];\n        n += S[0x100 | l >> 16 & 0xff];\n        n ^= S[0x200 | l >> 8 & 0xff];\n        n += S[0x300 | l & 0xff];\n        r ^= n ^ P[5];\n        n = S[r >>> 24];\n        n += S[0x100 | r >> 16 & 0xff];\n        n ^= S[0x200 | r >> 8 & 0xff];\n        n += S[0x300 | r & 0xff];\n        l ^= n ^ P[6];\n        //Iteration 3\n        n = S[l >>> 24];\n        n += S[0x100 | l >> 16 & 0xff];\n        n ^= S[0x200 | l >> 8 & 0xff];\n        n += S[0x300 | l & 0xff];\n        r ^= n ^ P[7];\n        n = S[r >>> 24];\n        n += S[0x100 | r >> 16 & 0xff];\n        n ^= S[0x200 | r >> 8 & 0xff];\n        n += S[0x300 | r & 0xff];\n        l ^= n ^ P[8];\n        //Iteration 4\n        n = S[l >>> 24];\n        n += S[0x100 | l >> 16 & 0xff];\n        n ^= S[0x200 | l >> 8 & 0xff];\n        n += S[0x300 | l & 0xff];\n        r ^= n ^ P[9];\n        n = S[r >>> 24];\n        n += S[0x100 | r >> 16 & 0xff];\n        n ^= S[0x200 | r >> 8 & 0xff];\n        n += S[0x300 | r & 0xff];\n        l ^= n ^ P[10];\n        //Iteration 5\n        n = S[l >>> 24];\n        n += S[0x100 | l >> 16 & 0xff];\n        n ^= S[0x200 | l >> 8 & 0xff];\n        n += S[0x300 | l & 0xff];\n        r ^= n ^ P[11];\n        n = S[r >>> 24];\n        n += S[0x100 | r >> 16 & 0xff];\n        n ^= S[0x200 | r >> 8 & 0xff];\n        n += S[0x300 | r & 0xff];\n        l ^= n ^ P[12];\n        //Iteration 6\n        n = S[l >>> 24];\n        n += S[0x100 | l >> 16 & 0xff];\n        n ^= S[0x200 | l >> 8 & 0xff];\n        n += S[0x300 | l & 0xff];\n        r ^= n ^ P[13];\n        n = S[r >>> 24];\n        n += S[0x100 | r >> 16 & 0xff];\n        n ^= S[0x200 | r >> 8 & 0xff];\n        n += S[0x300 | r & 0xff];\n        l ^= n ^ P[14];\n        //Iteration 7\n        n = S[l >>> 24];\n        n += S[0x100 | l >> 16 & 0xff];\n        n ^= S[0x200 | l >> 8 & 0xff];\n        n += S[0x300 | l & 0xff];\n        r ^= n ^ P[15];\n        n = S[r >>> 24];\n        n += S[0x100 | r >> 16 & 0xff];\n        n ^= S[0x200 | r >> 8 & 0xff];\n        n += S[0x300 | r & 0xff];\n        l ^= n ^ P[16];\n        lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];\n        lr[off + 1] = l;\n        return lr;\n    }\n    /**\r\n     * @param {Array.<number>} data\r\n     * @param {number} offp\r\n     * @returns {{key: number, offp: number}}\r\n     * @inner\r\n     */ function _streamtoword(data, offp) {\n        for(var i = 0, word = 0; i < 4; ++i)word = word << 8 | data[offp] & 0xff, offp = (offp + 1) % data.length;\n        return {\n            key: word,\n            offp: offp\n        };\n    }\n    /**\r\n     * @param {Array.<number>} key\r\n     * @param {Array.<number>} P\r\n     * @param {Array.<number>} S\r\n     * @inner\r\n     */ function _key(key, P, S) {\n        var offset = 0, lr = [\n            0,\n            0\n        ], plen = P.length, slen = S.length, sw;\n        for(var i = 0; i < plen; i++)sw = _streamtoword(key, offset), offset = sw.offp, P[i] = P[i] ^ sw.key;\n        for(i = 0; i < plen; i += 2)lr = _encipher(lr, 0, P, S), P[i] = lr[0], P[i + 1] = lr[1];\n        for(i = 0; i < slen; i += 2)lr = _encipher(lr, 0, P, S), S[i] = lr[0], S[i + 1] = lr[1];\n    }\n    /**\r\n     * Expensive key schedule Blowfish.\r\n     * @param {Array.<number>} data\r\n     * @param {Array.<number>} key\r\n     * @param {Array.<number>} P\r\n     * @param {Array.<number>} S\r\n     * @inner\r\n     */ function _ekskey(data, key, P, S) {\n        var offp = 0, lr = [\n            0,\n            0\n        ], plen = P.length, slen = S.length, sw;\n        for(var i = 0; i < plen; i++)sw = _streamtoword(key, offp), offp = sw.offp, P[i] = P[i] ^ sw.key;\n        offp = 0;\n        for(i = 0; i < plen; i += 2)sw = _streamtoword(data, offp), offp = sw.offp, lr[0] ^= sw.key, sw = _streamtoword(data, offp), offp = sw.offp, lr[1] ^= sw.key, lr = _encipher(lr, 0, P, S), P[i] = lr[0], P[i + 1] = lr[1];\n        for(i = 0; i < slen; i += 2)sw = _streamtoword(data, offp), offp = sw.offp, lr[0] ^= sw.key, sw = _streamtoword(data, offp), offp = sw.offp, lr[1] ^= sw.key, lr = _encipher(lr, 0, P, S), S[i] = lr[0], S[i + 1] = lr[1];\n    }\n    /**\r\n     * Internaly crypts a string.\r\n     * @param {Array.<number>} b Bytes to crypt\r\n     * @param {Array.<number>} salt Salt bytes to use\r\n     * @param {number} rounds Number of rounds\r\n     * @param {function(Error, Array.<number>=)=} callback Callback receiving the error, if any, and the resulting bytes. If\r\n     *  omitted, the operation will be performed synchronously.\r\n     *  @param {function(number)=} progressCallback Callback called with the current progress\r\n     * @returns {!Array.<number>|undefined} Resulting bytes if callback has been omitted, otherwise `undefined`\r\n     * @inner\r\n     */ function _crypt(b, salt, rounds, callback, progressCallback) {\n        var cdata = C_ORIG.slice(), clen = cdata.length, err;\n        // Validate\n        if (rounds < 4 || rounds > 31) {\n            err = Error(\"Illegal number of rounds (4-31): \" + rounds);\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            } else throw err;\n        }\n        if (salt.length !== BCRYPT_SALT_LEN) {\n            err = Error(\"Illegal salt length: \" + salt.length + \" != \" + BCRYPT_SALT_LEN);\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            } else throw err;\n        }\n        rounds = 1 << rounds >>> 0;\n        var P, S, i = 0, j;\n        //Use typed arrays when available - huge speedup!\n        if (Int32Array) {\n            P = new Int32Array(P_ORIG);\n            S = new Int32Array(S_ORIG);\n        } else {\n            P = P_ORIG.slice();\n            S = S_ORIG.slice();\n        }\n        _ekskey(salt, b, P, S);\n        /**\r\n         * Calcualtes the next round.\r\n         * @returns {Array.<number>|undefined} Resulting array if callback has been omitted, otherwise `undefined`\r\n         * @inner\r\n         */ function next() {\n            if (progressCallback) progressCallback(i / rounds);\n            if (i < rounds) {\n                var start = Date.now();\n                for(; i < rounds;){\n                    i = i + 1;\n                    _key(b, P, S);\n                    _key(salt, P, S);\n                    if (Date.now() - start > MAX_EXECUTION_TIME) break;\n                }\n            } else {\n                for(i = 0; i < 64; i++)for(j = 0; j < clen >> 1; j++)_encipher(cdata, j << 1, P, S);\n                var ret = [];\n                for(i = 0; i < clen; i++)ret.push((cdata[i] >> 24 & 0xff) >>> 0), ret.push((cdata[i] >> 16 & 0xff) >>> 0), ret.push((cdata[i] >> 8 & 0xff) >>> 0), ret.push((cdata[i] & 0xff) >>> 0);\n                if (callback) {\n                    callback(null, ret);\n                    return;\n                } else return ret;\n            }\n            if (callback) nextTick(next);\n        }\n        // Async\n        if (typeof callback !== \"undefined\") {\n            next();\n        // Sync\n        } else {\n            var res;\n            while(true)if (typeof (res = next()) !== \"undefined\") return res || [];\n        }\n    }\n    /**\r\n     * Internally hashes a string.\r\n     * @param {string} s String to hash\r\n     * @param {?string} salt Salt to use, actually never null\r\n     * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting hash. If omitted,\r\n     *  hashing is perormed synchronously.\r\n     *  @param {function(number)=} progressCallback Callback called with the current progress\r\n     * @returns {string|undefined} Resulting hash if callback has been omitted, otherwise `undefined`\r\n     * @inner\r\n     */ function _hash(s, salt, callback, progressCallback) {\n        var err;\n        if (typeof s !== \"string\" || typeof salt !== \"string\") {\n            err = Error(\"Invalid string / salt: Not a string\");\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            } else throw err;\n        }\n        // Validate the salt\n        var minor, offset;\n        if (salt.charAt(0) !== \"$\" || salt.charAt(1) !== \"2\") {\n            err = Error(\"Invalid salt version: \" + salt.substring(0, 2));\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            } else throw err;\n        }\n        if (salt.charAt(2) === \"$\") minor = String.fromCharCode(0), offset = 3;\n        else {\n            minor = salt.charAt(2);\n            if (minor !== \"a\" && minor !== \"b\" && minor !== \"y\" || salt.charAt(3) !== \"$\") {\n                err = Error(\"Invalid salt revision: \" + salt.substring(2, 4));\n                if (callback) {\n                    nextTick(callback.bind(this, err));\n                    return;\n                } else throw err;\n            }\n            offset = 4;\n        }\n        // Extract number of rounds\n        if (salt.charAt(offset + 2) > \"$\") {\n            err = Error(\"Missing salt rounds\");\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            } else throw err;\n        }\n        var r1 = parseInt(salt.substring(offset, offset + 1), 10) * 10, r2 = parseInt(salt.substring(offset + 1, offset + 2), 10), rounds = r1 + r2, real_salt = salt.substring(offset + 3, offset + 25);\n        s += minor >= \"a\" ? \"\\x00\" : \"\";\n        var passwordb = stringToBytes(s), saltb = base64_decode(real_salt, BCRYPT_SALT_LEN);\n        /**\r\n         * Finishes hashing.\r\n         * @param {Array.<number>} bytes Byte array\r\n         * @returns {string}\r\n         * @inner\r\n         */ function finish(bytes) {\n            var res = [];\n            res.push(\"$2\");\n            if (minor >= \"a\") res.push(minor);\n            res.push(\"$\");\n            if (rounds < 10) res.push(\"0\");\n            res.push(rounds.toString());\n            res.push(\"$\");\n            res.push(base64_encode(saltb, saltb.length));\n            res.push(base64_encode(bytes, C_ORIG.length * 4 - 1));\n            return res.join(\"\");\n        }\n        // Sync\n        if (typeof callback == \"undefined\") return finish(_crypt(passwordb, saltb, rounds));\n        else {\n            _crypt(passwordb, saltb, rounds, function(err, bytes) {\n                if (err) callback(err, null);\n                else callback(null, finish(bytes));\n            }, progressCallback);\n        }\n    }\n    /**\r\n     * Encodes a byte array to base64 with up to len bytes of input, using the custom bcrypt alphabet.\r\n     * @function\r\n     * @param {!Array.<number>} b Byte array\r\n     * @param {number} len Maximum input length\r\n     * @returns {string}\r\n     * @expose\r\n     */ bcrypt.encodeBase64 = base64_encode;\n    /**\r\n     * Decodes a base64 encoded string to up to len bytes of output, using the custom bcrypt alphabet.\r\n     * @function\r\n     * @param {string} s String to decode\r\n     * @param {number} len Maximum output length\r\n     * @returns {!Array.<number>}\r\n     * @expose\r\n     */ bcrypt.decodeBase64 = base64_decode;\n    return bcrypt;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/bcryptjs/dist/bcrypt.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/bcryptjs/index.js":
/*!****************************************!*\
  !*** ./node_modules/bcryptjs/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n Copyright (c) 2012 Nevins Bartolomeo <nevins.bartolomeo@gmail.com>\r\n Copyright (c) 2012 Shane Girish <shaneGirish@gmail.com>\r\n Copyright (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n\r\n Redistribution and use in source and binary forms, with or without\r\n modification, are permitted provided that the following conditions\r\n are met:\r\n 1. Redistributions of source code must retain the above copyright\r\n notice, this list of conditions and the following disclaimer.\r\n 2. Redistributions in binary form must reproduce the above copyright\r\n notice, this list of conditions and the following disclaimer in the\r\n documentation and/or other materials provided with the distribution.\r\n 3. The name of the author may not be used to endorse or promote products\r\n derived from this software without specific prior written permission.\r\n\r\n THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\r\n IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\r\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */ module.exports = __webpack_require__(/*! ./dist/bcrypt.js */ \"(action-browser)/./node_modules/bcryptjs/dist/bcrypt.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9iY3J5cHRqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0EwQkMsR0FFREEsdUhBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dDE0c3RhcnRlci8uL25vZGVfbW9kdWxlcy9iY3J5cHRqcy9pbmRleC5qcz8zYTkyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTIgTmV2aW5zIEJhcnRvbG9tZW8gPG5ldmlucy5iYXJ0b2xvbWVvQGdtYWlsLmNvbT5cclxuIENvcHlyaWdodCAoYykgMjAxMiBTaGFuZSBHaXJpc2ggPHNoYW5lR2lyaXNoQGdtYWlsLmNvbT5cclxuIENvcHlyaWdodCAoYykgMjAxMyBEYW5pZWwgV2lydHogPGRjb2RlQGRjb2RlLmlvPlxyXG5cclxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxyXG4gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zXHJcbiBhcmUgbWV0OlxyXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcclxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cclxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XHJcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXHJcbiBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxyXG4gMy4gVGhlIG5hbWUgb2YgdGhlIGF1dGhvciBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXHJcbiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cclxuXHJcbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBBVVRIT1IgYGBBUyBJUycnIEFORCBBTlkgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFU1xyXG4gT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC5cclxuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcclxuIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVFxyXG4gTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLFxyXG4gREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZXHJcbiBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXHJcbiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0ZcclxuIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXHJcbiAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9kaXN0L2JjcnlwdC5qc1wiKTtcclxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/bcryptjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/bcryptjs/index.js":
/*!****************************************!*\
  !*** ./node_modules/bcryptjs/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n Copyright (c) 2012 Nevins Bartolomeo <nevins.bartolomeo@gmail.com>\r\n Copyright (c) 2012 Shane Girish <shaneGirish@gmail.com>\r\n Copyright (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n\r\n Redistribution and use in source and binary forms, with or without\r\n modification, are permitted provided that the following conditions\r\n are met:\r\n 1. Redistributions of source code must retain the above copyright\r\n notice, this list of conditions and the following disclaimer.\r\n 2. Redistributions in binary form must reproduce the above copyright\r\n notice, this list of conditions and the following disclaimer in the\r\n documentation and/or other materials provided with the distribution.\r\n 3. The name of the author may not be used to endorse or promote products\r\n derived from this software without specific prior written permission.\r\n\r\n THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\r\n IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\r\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */ module.exports = __webpack_require__(/*! ./dist/bcrypt.js */ \"(rsc)/./node_modules/bcryptjs/dist/bcrypt.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmNyeXB0anMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBMEJDLEdBRURBLDRHQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQxNHN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvYmNyeXB0anMvaW5kZXguanM/M2E5MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gQ29weXJpZ2h0IChjKSAyMDEyIE5ldmlucyBCYXJ0b2xvbWVvIDxuZXZpbnMuYmFydG9sb21lb0BnbWFpbC5jb20+XHJcbiBDb3B5cmlnaHQgKGMpIDIwMTIgU2hhbmUgR2lyaXNoIDxzaGFuZUdpcmlzaEBnbWFpbC5jb20+XHJcbiBDb3B5cmlnaHQgKGMpIDIwMTMgRGFuaWVsIFdpcnR6IDxkY29kZUBkY29kZS5pbz5cclxuXHJcbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcclxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uc1xyXG4gYXJlIG1ldDpcclxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XHJcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXHJcbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxyXG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxyXG4gZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cclxuIDMuIFRoZSBuYW1lIG9mIHRoZSBhdXRob3IgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xyXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXHJcblxyXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQVVUSE9SIGBgQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1MgT1JcclxuIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVNcclxuIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuXHJcbiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXHJcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVRcclxuIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSxcclxuIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWVxyXG4gVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxyXG4gKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GXHJcbiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxyXG4gKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vZGlzdC9iY3J5cHQuanNcIik7XHJcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/bcryptjs/index.js\n");

/***/ })

};
;